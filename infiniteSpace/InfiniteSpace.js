var version="v1.1.2";
void setup(){
  size(1000,700);
  frameRate(60);  
}
var tick=0;
window.onkeydown=function(e){
    var code = e.keyCode ? e.keyCode : e.which;
	if(code==87){
		rawkeys.w=1;
	}
	else if(code==65){
		rawkeys.a=1;
	}
	else if(code==83){
		rawkeys.s=1;
	}
	else if(code==68){
		rawkeys.d=1;
	}
	else if(code==86){
		rawkeys.v=1;
	}
	else if(code==66){
		rawkeys.b=1;
	}
	else if(code==78){
		rawkeys.n=1;
	}
	else if(code==77){
		rawkeys.m=1;
	}
	else if(code==32){
		rawkeys.space=1;
	}
	else if(code==27){
		rawkeys.esc=1;
	}
}
window.onkeyup=function(e){
    var code = e.keyCode ? e.keyCode : e.which;
	if(code==87){
		rawkeys.w=0;
	}
	else if(code==65){
		rawkeys.a=0;
	}
	else if(code==83){
		rawkeys.s=0;
	}
	else if(code==68){
		rawkeys.d=0;
	}
	else if(code==86){
		rawkeys.v=0;
	}
	else if(code==66){
		rawkeys.b=0;
	}
	else if(code==78){
		rawkeys.n=0;
	}
	else if(code==77){
		rawkeys.m=0;
	}
	else if(code==32){
		rawkeys.space=0;
	}
	else if(code==27){
		rawkeys.esc=0;
	}
}
var rawkeys={
	w:0,
	a:0,
	s:0,
	d:0,
	v:0,
	b:0,
	n:0,
	m:0,
	space:0,
	esc:0
};
var fps={
	fps:0,
	second:0,
	lastsecond:0,
	fpscount:0
};
var unpaused=1;
var options={
	graphics:1,
	stars:1,
	music:0.7,
	sfx:0.7,
	shipId:0,
	shipMods:new Array(99),
	misc:new Array(99),
	custom:{
		active:0,
		starttime:0,
		forcebiome:0,
		disabledbiomes:new Array(99),
		misc:new Array(99)
	}
};
var enemies=new Array();
var projectiles=new Array();
var objects=new Array();
var controlmode=0;
var ingame=0;
var menumode=0;
var dirgeneric=function(x1,y1,x2,y2){
	if(x1-x2<0){
		return(atan((y1-y2)/(x1-x2))+PI/2);
	}
	else if(x1-x2>0){
		return(atan((y1-y2)/(x1-x2))-PI/2);
	}
	if(y1>y2){
		return(0);
	}
	else{
		return(PI);
	}
}
var getgamesecfd=function(){
	if((round(gametick/60))%60<10){
		return("0"+(round(gametick/60))%60);
	}
	else{
		return((round(gametick/60))%60);
	}
}
var getshipstatcolor=function(val){
	if(val<2){
		fill(255,0,0);
	}
	else if(val<3){
		fill(255,150,0);
	}
	else if(val<5){
		fill(255,255,50);
	}
	else if(val<7){
		fill(0,255,0);
	}
	else if(val<9){
		fill(0,0,255);
	}
	else{
		fill(100,100,255);
	}
}
var enemyproj=function(args){
	append(projectiles,new cenemyproj(args));
	/*if(args.run){
		projectiles[projectiles.length-1].run=args.run;
	}*/
}
function cenemyproj(args){
	this.target=0;
	this.timer=0;
	if(args.draw){
		this.draw=args.draw;
	}
	else{
		this.draw=function(){
			ellipseMode(CENTER);
			fill(args.r,args.g,args.b);
			ellipse(projectiles[a].x,projectiles[a].y,args.size*1.1+1,args.size*1.1+1);
			if(options.graphics){
				if(projectiles[a].target){
					fill(0,0,255,10);
				}
				else{
					fill(255,0,0,10);
				}
				for(b=0;b<args.size*0.4;b+=1){
					ellipse(projectiles[a].x,projectiles[a].y,b*10,b*10);
				}
			}
		};
	}
	this.x=enemies[args.source].x;
	this.y=enemies[args.source].y;
	this.end=2;
	this.pierce=0;
	this.dir=args.dir;
	this.speed=args.speed;
	this.size=args.size;
	this.damage=args.damage;
	this.isSingleTarget=true;
	if(args.run){
		this.run=args.run;
	}
	if(args.misc){
		this.misc=args.misc;
	}
}
var biome={
	id:0,
	color:{r:15,g:10,b:40},
	timer:0
};
var bgcolor=function(r,g,b){
	if(biome.color.r>r){
		biome.color.r=max(r,biome.color.r-0.5);
	}
	if(biome.color.r<r){
		biome.color.r=min(r,biome.color.r+0.5);
	}
	if(biome.color.g>g){
		biome.color.g=max(g,biome.color.g-0.5);
	}
	if(biome.color.g<g){
		biome.color.g=min(g,biome.color.g+0.5);
	}
	if(biome.color.b>b){
		biome.color.b=max(b,biome.color.b-0.5);
	}
	if(biome.color.b<b){
		biome.color.b=min(b,biome.color.b+0.5);
	}
}
var smashfx=function(x,y){
	var smashptdir=random(2*PI);
	for(c=-60;c<60;c+=1){
		append(particles,{x:x+c*cos(smashptdir)*2+random(-15,15),y:y+c*sin(smashptdir)*2+random(-15,15),xvelo:random(-1,1),yvelo:random(-1),
		size:12,op:random(500,650),opc:-18,exp:1,color:[random(100,200),random(20,30),random(20,30)]});
	}
}
var forcebiome=0;
var selectbiome=function(){
	stagetemp.biomeprogress=0;
	//return(3);
	for(a=0;a<100;a+=1){
		temp=round(random(0.51,biomescripts.length-0.51));
		if(biomechance[temp]()){
			return(temp);
		}
	}
	return(0);
}
var biomechance=[
	function(){
		return(true);
	},
	function(){
		if(!(options.custom.active&options.custom.disabledbiomes[0])){
			if(gametick>18000&random(1)<min(0.7,gametick/90000)){
				return(true);
			}
		}
		return(false);
	},
	function(){
		if(!(options.custom.active&options.custom.disabledbiomes[1])){
			if(random(1)<1.101-min(0.7,gametick/36000)){
				return(true);
			}
		}
		return(false);
	},
	function(){
		if(!(options.custom.active&options.custom.disabledbiomes[2])){
			if(gametick>3600&random(1)<min(0.5,gametick/50000)){
				return(true);
			}
		}
		return(false);
	},
	function(){
		if(!(options.custom.active&options.custom.disabledbiomes[3])){
			if(gametick>7200&random(1)<min(0.6,gametick/75000)){
				return(true);
			}
		}
		return(false);
	},
	function(){
		if(!(options.custom.active&options.custom.disabledbiomes[4])){
			if(gametick>28800&random(1)<min(0.75,gametick/100000)){
				return(true);
			}
		}
		return(false);
	},
];
var enemyscripts={
	lavapool:function(){
		enemyscripts.slavapool(enemies[a].x,enemies[a].y);
	},
	slavapool:function(x,y){
		append(objects,{
			x:x,
			y:y,
			size:100,
			velo:0.5,
			draw:function(){
				fill(130+abs(tick%120-60)*2,80+abs(tick%120-60)*2,abs(tick%120-60)*2,140+abs(tick%90-45));
				ellipseMode(CENTER);
				ellipse(objects[a].x,objects[a].y,objects[a].size*0.45+abs(tick%24-12)*2,objects[a].size*0.45+abs((tick+12)%24-12)*2);
			},
			run:function(){
				if(objects[a].hitcd>0){
					objects[a].hitcd-=1;
				}
				else{
					if(!(playertemp.phasing>0)){
						if(playerhitbox(objects[a].x,objects[a].y,objects[a].size*0.45)){
							if(pow(player.x-objects[a].x,2)+pow(player.y-objects[a].y,2)<pow(player.size+objects[a].size*0.45,2)){
								objects[a].hitcd=5;
								takedamage({dmg:max(0.25,min(2,objects[a].velo-1))});
							}
						}
					}
				}
				if(options.graphics){
					append(particles,{x:objects[a].x+random(-objects[a].size/2,objects[a].size/2),y:objects[a].y+random(-objects[a].size/2,objects[a].size/2),xvelo:random(-9,9),yvelo:random(-6,12),
					size:random(7,10),op:random(160,200),opc:-36,exp:1,color:[random(200,255),random(170,220),random(30,55)]});
				}
				objects[a].y+=objects[a].velo;
				objects[a].velo=min(4,objects[a].velo+0.03);
				objects[a].size=max(40,objects[a].size-0.4);
				if(objects[a].y>770){
					objects.splice(a,1);
					a-=1;
				}
			}
		});
	},
	abysspool:function(){
		append(objects,{
			x:enemies[a].x,
			y:enemies[a].y,
			size:30,
			draw:function(){
				fill(abs(tick%120-60)*2,abs(tick%120-60)*2,150+abs(tick%120-60)*2,(1+abs(tick%90-45)/140)*(140-min(100,objects[a].size*0.7)));
				ellipseMode(CENTER);
				ellipse(objects[a].x,objects[a].y,objects[a].size+abs(tick%100-50)/4,objects[a].size+abs((tick+50)%100-50)/4);
			},
			run:function(){
				objects[a].size+=0.5;
				if(!(playertemp.waterproof)){
					if(playerhitbox(objects[a].x,objects[a].y,objects[a].size*0.45)){
						playertemp.slow=max(playertemp.slow,max(0.25,0.86-objects[a].size*0.002));
					}
				}
				if(options.graphics){
					if(tick%3==0){
						append(particles,{x:objects[a].x+random(-objects[a].size/2,objects[a].size/2),y:objects[a].y+random(-objects[a].size/2,objects[a].size/2),xvelo:random(-3,3),yvelo:0,yacc:0.6,
						size:random(7,10),op:random(160,200),opc:-18,exp:1,color:[random(50),random(50),random(200,255)]});
					}
				}
				objects[a].y+=1.25;
				if(objects[a].y>950){
					objects.splice(a,1);
					a-=1;
				}
			}
		});
	}
};
var biomescripts=[
//0: asteroids
function(){
	bgcolor(15,10,40);
	if(gametick%(round(40-min(10,max(0,gametick-7200)/1440)))==0){
		if(gametick>7200&random(1)<0.01+min(0.05,max(0,gametick-7200)/720000)&(stagetemp.comets<1||!(stagetemp.comets))){
			if(!(stagetemp.comets)){
				stagetemp.comets=0;
			}
			stagetemp.comets+=1;
			append(enemies,{
				name:"comet",
				hp:850,
				mhp:850,
				size:40,
				xvelo:random(-1.5,1.5),
				yvelo:6,
				xacc:0,
				yacc:0,
				x:random(100,900),
				y:-20,
				contactcd:30,
				timer:0,
				id:tick%6000,
				ammo:0,
				stdm:0.6,
				dmgm:1.4,
				color:[random(70,120),random(40,120),random(100,120)],
				mcolor:[random(40,120),random(40,120),random(200,255)],
				rockpos:[[random(-60,60),random(-60,60)],[random(-60,60),random(-60,60)],[random(-60,60),random(-60,60)],[random(-60,60),random(-60,60)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(255,210,180,10);
						for(b=0;b<32;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(255,210,180,40);
						for(b=0;b<8;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].mcolor[0],enemies[a].mcolor[1],enemies[a].mcolor[2]);
					ellipse(enemies[a].x,enemies[a].y,50,50);
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					for(b=0;b<enemies[a].rockpos.length;b+=1){
						ellipse(enemies[a].x+enemies[a].rockpos[b][0],enemies[a].y+enemies[a].rockpos[b][1],20,15);
					}
					strokeWeight(10);
					noFill();
					stroke(0,255,0);
					arc(enemies[a].x,enemies[a].y,60,60,0,(enemies[a].hp/enemies[a].mhp)*2*PI);
					noStroke();
				},
				run:function(){
					enemies[a].ammo+=1;
					if(enemies[a].ammo>70){
						append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-2,2),
						size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[255,random(100,150),random(30,55)]});
					}
					if(enemies[a].ammo>90){
						if(random(1)<0.55){
							enemies[a].ammo-=35;
							for(b=-4;b<5;b+=1){
								enemyproj({r:100,g:100,b:255,size:16,speed:4,damage:10,dir:PI+b*PI/4,source:a});
							}
						}
						else if(random(1)<0.4){
							enemies[a].ammo-=25;
							if(random(1)<0.5){
								for(b=-2;b<3;b+=1){
									enemyproj({r:100,g:100,b:255,size:12,speed:5,damage:8,dir:PI+b*PI/2,source:a});
								}
							}
							else{
								for(b=-2;b<3;b+=1){
									enemyproj({r:100,g:100,b:255,size:12,speed:5,damage:8,dir:PI/4+b*PI/2,source:a});
								}
							}
						}
						else{
							enemies[a].ammo-=120;
							for(b=-8;b<9;b+=1){
								enemyproj({r:100,g:100,b:255,size:18,speed:0,damage:11,dir:2*PI/3+random(2*PI/3)+b*PI/4,source:a,misc:{timer:0,activate:random(3,15)},
								run:function(){
									projectiles[a].misc.timer+=1;
									if(projectiles[a].misc.timer>projectiles[a].misc.activate){
										projectiles[a].speed=max(3.5,projectiles[a].speed);
									}
								}});
							}
						}
					}
					enemies[a].timer+=1;
					enemies[a].contactcd=max(0,enemies[a].contactcd-1);
					if(random(1)<0.03){
						enemies[a].xacc=random(-0.25,0.25);
					}
					if(enemies[a].x<170){
						enemies[a].xacc=random(0,0.25);
					}
					else if(enemies[a].x>830){
						enemies[a].xacc=random(-0.25,0);
					}
					if(enemies[a].timer<30){
						enemies[a].yacc=0;
						enemies[a].yvelo=6;
					}
					else if(enemies[a].timer>=3600||!(biome.id==0)){
						enemies[a].yacc=0;
						enemies[a].yvelo=-4;
					}
					else{
						if(random(1)<0.03){
							enemies[a].yacc=random(-0.25,0.25);
						}
						if(enemies[a].y<50){
							enemies[a].yacc=random(0.1,0.25);
						}
						else if(enemies[a].y>350){
							enemies[a].yacc=random(-0.25,-0.1);
						}
					}
					enemies[a].xvelo=max(-4,min(4,enemies[a].xvelo+enemies[a].xacc));
					enemies[a].yvelo=max(-4,min(4,enemies[a].yvelo+enemies[a].yacc));
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=enemies[a].yvelo;
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							/*if(player.x>enemies[a].x){
								player.x=enemies[a].x+enemies[a].size+4;
							}
							else{
								player.x=enemies[a].x-enemies[a].size-4;
							}
							if(player.y>enemies[a].y){
								player.y=enemies[a].y+enemies[a].size+4;
							}
							else{
								player.y=enemies[a].y-enemies[a].size-4;
							}*/
							if(enemies[a].contactcd<=0){
								enemies[a].contactcd=60;
								takedamage({dmg:10});
							}
						}
					}
					if(enemies[a].y>750||enemies[a].y<-100){
						enemies[a].exp=1;
					}
				},
				onend:function(){
					stagetemp.comets-=1;
				},
				exp:0,
				score:400
			});
		}
		else if(random(1)<0.85-min(0.1,gametick/72000)){
			append(enemies,{
				name:"meteor",
				isTerrain:1,
				hp:40,
				mhp:40,
				size:15,
				x:random(100,900),
				xvelo:random(-1,1),
				y:-20,
				id:tick%6000,
				color:[random(40,80),random(20,60),random(0,40)],
				rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(255,255,255,10);
						for(b=0;b<16;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(255,255,255,40);
						for(b=0;b<4;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					ellipse(enemies[a].x,enemies[a].y,18,18);
					ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,15);
				},
				run:function(){
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=2;
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							enemies[a].exp=1;
							takedamage({dmg:10});
						}
					}
					if(enemies[a].y>720||enemies[a].x>930||enemies[a].x<70){
						enemies[a].exp=1;
					}
				},
				exp:0,
				score:10
			});
		}
		else{
			append(enemies,{
				name:"meteor drone",
				hp:60,
				mhp:40,
				size:15,
				xvelo:random(-1.5,1.5),
				xacc:0,
				x:random(100,900),
				y:-20,
				id:tick%6000,
				ammo:0,
				color:[random(40,80),random(20,60),random(0,40)],
				rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(255,255,255,10);
						for(b=0;b<16;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(255,255,255,40);
						for(b=0;b<4;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					ellipse(enemies[a].x,enemies[a].y,22,22);
					ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],20,15);
					ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,20);
					ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],20,15);
					ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,20);
					fill(255,0,0,150+abs(tick%120-60)*2);
					ellipse(enemies[a].x,enemies[a].y,10,10);
				},
				run:function(){
					enemies[a].ammo+=1;
					if(enemies[a].ammo>60){
						append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-2,2),
						size:random(7,10),op:random(160,200),opc:-7,exp:1,color:[random(120,150),random(100,130),random(30,55)]});
					}
					if(enemies[a].ammo>90){
						if(random(1)<0.55){
							enemies[a].ammo-=90;
							enemyproj({r:100,g:80,b:20,size:14,speed:4.5,damage:10,dir:PI,source:a});
						}
						else if(random(1)<0.5){
							enemies[a].ammo-=150;
							enemyproj({r:100,g:80,b:20,size:14,speed:4.5,damage:9,dir:PI,source:a});
							enemyproj({r:100,g:80,b:20,size:14,speed:0,damage:10,dir:PI,source:a,misc:{timer:0},
							run:function(){
								projectiles[a].misc.timer+=1;
								if(projectiles[a].misc.timer<=24){
									projectiles[a].speed+=0.1875;
								}
							}});
						}
						else{
							enemies[a].ammo-=180;
							for(b=0;b<3;b+=1){
								enemyproj({r:100,g:80,b:20,size:14,speed:5.5,damage:7,dir:PI-PI/8+b*PI/8,source:a});
							}
						}
					}
					if(random(1)<0.03){
						enemies[a].xacc=random(-0.1,0.1);
					}
					if(enemies[a].x<140){
						enemies[a].xacc=random(0,0.15);
					}
					if(enemies[a].x>860){
						enemies[a].xacc=random(-0.15,0);
					}
					enemies[a].xvelo=min(3,max(-3,enemies[a].xvelo+enemies[a].xacc));
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=0.5;
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							enemies[a].exp=1;
							takedamage({dmg:12});
						}
					}
					if(enemies[a].y>720){
						enemies[a].exp=1;
					}
				},
				exp:0,
				score:25
			});
		}
	}
	if(stagetemp.biomecd>0&!(forcebiome)){
		stagetemp.biomecd-=1;
	}
	else if(gametick%60==0){
		if(!(stagetemp.biomestacks)){
			stagetemp.biomestacks=0;
		}
		stagetemp.biomestacks+=1+min(1,gametick/18000);
		if(forcebiome||random(1)<stagetemp.biomestacks/1000-0.01){
			stagetemp.biomestacks-=60;
			biome.id=selectbiome();
			biome.timer=0;
			biome.temp={};
		}
	}
},
//1: scorched skies
function(){
	bgcolor(80,50,20);
	biome.timer+=1;
	if(biome.timer<=100){
		bgm.volume((1-biome.timer/100)*options.music*bgmv);
		if(biome.timer==100){
			bgm.pause();
			if(random(1)<0.5){
				setbgmt[4]();
			}
			else{
				setbgmt[5]();
			}
			bgmt.play();
		}
	}
	if(biome.timer<3600){
		if(gametick%(round(45-min(25,max(0,gametick-18000)/1440)))==0){
			if(random(1)<0.85-min(0.1,gametick/72000)){
				append(enemies,{
					name:"lava meteor",
					isTerrain:1,
					hp:40,
					mhp:40,
					size:15,
					x:random(100,900),
					xvelo:random(-1,1),
					y:-20,
					id:tick%6000,
					color:[random(120,200),random(20,190),random(0,40)],
					rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
					draw:function(){
						ellipseMode(CENTER);
						if(options.graphics){
							fill(255,255,255,10);
							for(b=0;b<16;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
							}
						}
						else{
							fill(255,255,255,40);
							for(b=0;b<4;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
							}
						}
						fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
						ellipse(enemies[a].x,enemies[a].y,18,18);
						ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,15);
					},
					run:function(){
						enemies[a].x+=enemies[a].xvelo;
						enemies[a].y+=2;
						if(!(playertemp.phasing>0)){
							if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
								enemies[a].exp=1;
								takedamage({dmg:4});
							}
						}
						if(enemies[a].y>770||enemies[a].x>1050||enemies[a].x<-50){
							enemies[a].exp=1;
						}
					},
					onend:function(){
						enemyscripts.lavapool();
					},
					exp:0,
					score:15
				});
			}
			else{
				append(enemies,{
					name:"lava sentry",
					isTerrain:1,
					hp:110,
					mhp:110,
					size:22,
					x:random(100,900),
					xvelo:random(-1,1),
					firing:0,
					ammo:0,
					y:-20,
					id:tick%6000,
					color:[random(60,90),random(50,80),random(30,60)],
					rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
					draw:function(){
						ellipseMode(CENTER);
						if(options.graphics){
							fill(255,255,255,10);
							for(b=0;b<16;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
							}
						}
						else{
							fill(255,255,255,40);
							for(b=0;b<4;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
							}
						}
						fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
						ellipse(enemies[a].x,enemies[a].y,15,40);
						ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,15);
						fill(255,0,0,150+abs(tick%120-60)*2);
						ellipse(enemies[a].x,enemies[a].y,10,10);
					},
					run:function(){
						enemies[a].ammo+=1;
						if(enemies[a].ammo>150){
							if(enemies[a].ammo>180){
								enemies[a].firing=1;
							}
							append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-2,2),
							size:random(7,10),op:random(160,200),opc:-7,exp:1,color:[random(200,255),random(170,220),random(30,55)]});
						}
						else if(enemies[a].ammo<0){
							enemies[a].firing=0;
						}
						if(enemies[a].firing){
							enemies[a].ammo-=2;
							if(enemies[a].ammo%7==0){
								enemyproj({r:255,g:220,b:120,size:25,speed:9,damage:7,dir:PI,source:a,misc:{timer:0,b:random(100)},
								run:function(){
									projectiles[a].misc.timer+=1;
									if(projectiles[a].misc.timer>20){
										projectiles[a].exp=1;
									}
									if(tick%2==0&options.graphics){
										append(particles,{x:projectiles[a].x+random(-projectiles[a].size,projectiles[a].size),y:projectiles[a].y+random(-projectiles[a].size,projectiles[a].size),xvelo:random(-3,3),yvelo:random(-1,6),
										size:random(7,10),op:random(160,200),opc:-12,exp:1,color:[random(200,255),random(170,220),random(30,55)]});
									}
								},
								draw:function(){
									ellipseMode(CENTER);
									fill(255,220,projectiles[a].misc.b);
									ellipse(projectiles[a].x+5,projectiles[a].y-10,30,30);
									ellipse(projectiles[a].x,projectiles[a].y+10,30,30);
									ellipse(projectiles[a].x-5,projectiles[a].y-10,30,30);
									if(options.graphics){
										if(projectiles[a].target){
											fill(90,90,255,10);
										}
										else{
											fill(255,90,90,10);
										}
										for(b=0;b<12;b+=1){
											ellipse(projectiles[a].x,projectiles[a].y,b*10,b*10);
										}
									}
								}
								});
							}
						}
						if(random(1)<0.03){
							enemies[a].xacc=random(-0.03,0.03);
						}
						if(enemies[a].x<140){
							enemies[a].xacc=random(0,0.05);
						}
						if(enemies[a].x>860){
							enemies[a].xacc=random(-0.05,0);
						}
						enemies[a].xvelo=min(1,max(-1,enemies[a].xvelo+enemies[a].xacc));
						enemies[a].x+=enemies[a].xvelo;
						enemies[a].y+=0.5;
						if(!(playertemp.phasing>0)){
							if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
								enemies[a].exp=1;
								takedamage({dmg:7});
							}
						}
						if(enemies[a].y>720){
							enemies[a].exp=1;
						}
					},
					onend:function(){
						enemyscripts.lavapool();
					},
					exp:0,
					score:50
				});
			}
		}
	}
	else if(biome.timer==4200){
		append(enemies,{
			name:"Blazing Sun",
			hp:3000+min(4000,max(0,gametick-18000)/7.5),
			mhp:3000+min(4000,max(0,gametick-18000)/7.5),
			size:40,
			isBoss:true,
			xvelo:random(-1.5,1.5),
			yvelo:6,
			xacc:0,
			yacc:0,
			x:random(100,900),
			y:-20,
			contactcd:30,
			timer:0,
			id:tick%6000,
			ammo:0,
			stdm:0.5,
			dmgm:1.5,
			refdmgm:0.8,
			color:[random(220,255),random(185,225),random(50,100)],
			rockpos:[[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)],[random(-80,80),random(-30,30)]],
			draw:function(){
				ellipseMode(CENTER);
				if(options.graphics){
					fill(255,210,180,10);
					for(b=0;b<48;b+=1){
						ellipse(enemies[a].x,enemies[a].y,b*7,b*7);
					}
				}
				else{
					fill(255,210,180,40);
					for(b=0;b<12;b+=1){
						ellipse(enemies[a].x,enemies[a].y,b*28,b*28);
					}
				}
				fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
				ellipse(enemies[a].x,enemies[a].y,75,75);
				fill(190+abs(tick%120-60),190+abs(tick%120-60),190+abs(tick%120-60),190+abs(tick%120-60));
				for(b=0;b<enemies[a].rockpos.length;b+=2){
					ellipse(enemies[a].x+enemies[a].rockpos[b][0],enemies[a].y+enemies[a].rockpos[b][1],15,8+abs(tick%120-60)/4);
				}
				for(b=1;b<enemies[a].rockpos.length;b+=2){
					ellipse(enemies[a].x+enemies[a].rockpos[b][0],enemies[a].y+enemies[a].rockpos[b][1],8+abs(tick%120-60)/4,15);
				}
				strokeWeight(10);
				noFill();
				stroke(0,255,0);
				arc(enemies[a].x,enemies[a].y,85,85,0,(enemies[a].hp/enemies[a].mhp)*2*PI);
				noStroke();
			},
			run:function(){
				if(enemies[a].hp+2500<enemies[a].mhp){
					append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-4,-2),
					size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[255,random(70,110),0]});
					if(gametick%40==0){
						enemyscripts.slavapool(random(100,900),-40);
					}
				}
				enemies[a].ammo+=0.7+min(0.8,max(0,gametick-18000)/50000);
				if(enemies[a].ammo>70){
					append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-2,2),
					size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[255,random(100,150),random(30,55)]});
				}
				if(enemies[a].ammo>90){
					if(random(1)<0.55){
						enemies[a].ammo-=25;
						for(b=-4;b<5;b+=1){
							enemyproj({r:255,g:200,b:50,size:18,speed:4,damage:12,dir:PI+b*PI/4,source:a});
						}
					}
					else if(random(1)<0.6){
						enemies[a].ammo-=20;
						if(random(1)<0.5){
							for(b=-2;b<3;b+=1){
								enemyproj({r:255,g:200,b:50,size:14,speed:5,damage:10,dir:PI+b*PI/2,source:a});
							}
						}
						else{
							for(b=-2;b<3;b+=1){
								enemyproj({r:255,g:200,b:50,size:14,speed:5,damage:10,dir:PI/4+b*PI/2,source:a});
							}
						}
					}
					else{
						enemies[a].ammo-=120;
						enemies[a].xvelo=0;
						enemies[a].yvelo=0;
						enemies[a].xacc=0;
						enemies[a].yacc=0;
						for(b=-24;b<25;b+=1){
							enemyproj({r:255,g:200,b:50,size:10,speed:0,damage:7,dir:2*PI/3+random(2*PI/3)+b*PI/4,source:a,misc:{timer:0,activate:random(3,110)},
							run:function(){
								projectiles[a].misc.timer+=1;
								if(projectiles[a].misc.timer>projectiles[a].misc.activate){
									projectiles[a].speed=max(2.5,projectiles[a].speed);
								}
							}});
						}
						if(gametick>57600){
							for(b=-12;b<13;b+=1){
								enemyproj({r:255,g:200,b:50,size:14,speed:0,damage:5,dir:2*PI/3+random(2*PI/3)+b*PI/4,source:a,misc:{timer:0,activate:random(3,110)},
								run:function(){
									projectiles[a].misc.timer+=1;
									if(projectiles[a].misc.timer>projectiles[a].misc.activate){
										projectiles[a].speed=max(2,projectiles[a].speed);
									}
								}});
							}
						}
					}
				}
				enemies[a].timer+=1;
				enemies[a].contactcd=max(0,enemies[a].contactcd-1);
				if(random(1)<0.03){
					enemies[a].xacc=random(-0.02,0.02);
				}
				if(enemies[a].x<170){
					enemies[a].xacc=random(0,0.03);
				}
				else if(enemies[a].x>830){
					enemies[a].xacc=random(-0.03,0);
				}
				if(enemies[a].timer<30){
					enemies[a].yacc=0;
					enemies[a].yvelo=4;
				}
				else{
					if(random(1)<0.03){
						enemies[a].yacc=random(-0.01,0.01);
					}
					if(enemies[a].y<70){
						enemies[a].yacc=random(0.01,0.02);
					}
					else if(enemies[a].y>200){
						enemies[a].yacc=random(-0.02,-0.01);
					}
				}
				enemies[a].xvelo=max(-2,min(2,enemies[a].xvelo+enemies[a].xacc));
				enemies[a].yvelo=max(-2,min(2,enemies[a].yvelo+enemies[a].yacc));
				enemies[a].x+=enemies[a].xvelo;
				enemies[a].y+=enemies[a].yvelo;
				if(!(playertemp.phasing>0)){
					if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
						/*if(player.x>enemies[a].x){
							player.x=enemies[a].x+enemies[a].size+4;
						}
						else{
							player.x=enemies[a].x-enemies[a].size-4;
						}
						if(player.y>enemies[a].y){
							player.y=enemies[a].y+enemies[a].size+4;
						}
						else{
							player.y=enemies[a].y-enemies[a].size-4;
						}*/
						if(enemies[a].contactcd<=0){
							enemies[a].contactcd=60;
							takedamage({dmg:10});
						}
					}
				}
				if(enemies[a].y>750||enemies[a].y<-100){
					enemies[a].exp=1;
				}
			},
			onend:function(){
				sfx.might.rate(random(0.9,1.1));
				sfx.might.volume(options.sfx*2.5);
				sfx.might.play();
				stagetemp.biomecd=900;
				biome.id=0;
				bgmt.stop();
				bgm.volume(options.music*bgmv);
				bgm.play();
			},
			exp:0,
			score:round(1200+min(3000,max(0,gametick-18000)/10))*2
		});
	}
},
//2: tranquil forest
function(){
	bgcolor(0,60,20);
	biome.timer+=1;
	if(biome.timer<=100){
		bgm.volume((1-biome.timer/100)*options.music*bgmv);
		if(biome.timer==100){
			bgm.pause();
			if(random(1)<0.5){
				setbgmt[0]();
			}
			else{
				setbgmt[1]();
			}
			bgmt.play();
		}
	}
	if(gametick%345==0){
		append(objects,{
			x:random(130,870),
			y:-30,
			draw:function(){
				fill(abs(tick%120-60)*2,255,abs(tick%120-60)*2,180+abs(tick%90-45));
				ellipseMode(CENTER);
				ellipse(objects[a].x,objects[a].y,30+abs(tick%50-25)/3,30+abs((tick+25)%50-25)/3);
				if(options.graphics){
					fill(80,210+abs(tick%90-45),80+abs(tick%90-45)*3,10);
					for(b=0;b<5+abs(tick%60-30)/2;b+=1){
						ellipse(objects[a].x,objects[a].y,25+b*3,25+b*3);
					}
				}
				else{
					fill(80,210+abs(tick%90-45),80+abs(tick%90-45)*3,40);
					for(b=0;b<(5+abs(tick%60-30)/2)/4;b+=1){
						ellipse(objects[a].x,objects[a].y,25+b*3,25+b*3);
					}
				}
			},
			run:function(){
				if(playerhitbox(objects[a].x,objects[a].y,25)){
					objects[a].y=999;
					heal(15+player.mhp*0.05);
					if(player.mods[12]){
						player.energy=min(player.menergy,player.energy+1);
						for(cp=0;cp<30;cp+=1){
							append(particles,{x:random(15,85),y:random(340,360),xvelo:random(-2,2),yvelo:random(-6,-3),
							size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
						}
					}
					player.energy=min(player.menergy,player.energy+2);
					player.wither=max(0,player.wither-20);
					for(cp=0;cp<40;cp+=1){
						append(particles,{x:random(15,85),y:random(340,360),xvelo:random(-2,2),yvelo:random(-6,-3),
						size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
					}
					for(cp=0;cp<40;cp+=1){
						append(particles,{x:random(915,965),y:random(590,610),xvelo:random(-2,2),yvelo:random(-6,-3),
						size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
					}
				}
				objects[a].y+=3;
				if(objects[a].y>730){
					objects.splice(a,1);
					a-=1;
				}
			}
		});
	}
	if(gametick%(round(35-min(12,max(0,gametick-7200)/1440)))==0){
		append(enemies,{
			name:"space tree",
			isTerrain:1,
			hp:50,
			mhp:50,
			size:20,
			x:random(100,900),
			xvelo:random(-1,1),
			y:-20,
			id:tick%6000,
			color:[random(70),random(180,255),random(70)],
			rockpos:[[random(-20,20),random(-30,5)],[random(-20,20),random(-30,5)],[random(-20,20),random(-30,5)],[random(-20,20),random(-30,5)],[random(-20,20),random(-30,5)],[random(-20,20),random(-30,5)],[random(-20,20),random(-30,5)]],
			draw:function(){
				ellipseMode(CENTER);
				if(options.graphics){
					fill(255,255,255,10);
					for(b=0;b<24;b+=1){
						ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
					}
				}
				else{
					fill(255,255,255,40);
					for(b=0;b<6;b+=1){
						ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
					}
				}
				fill(80,60,40);
				rect(enemies[a].x-10,enemies[a].y-20,20,40,4);
				fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
				ellipse(enemies[a].x,enemies[a].y-30,20,20);
				for(b=0;b<enemies[a].rockpos.length;b+=1){
					ellipse(enemies[a].x+enemies[a].rockpos[b][0],enemies[a].y+enemies[a].rockpos[b][1],20,20);
				}
			},
			run:function(){
				enemies[a].x+=enemies[a].xvelo;
				enemies[a].y+=2;
				if(!(playertemp.phasing>0)){
					if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
						enemies[a].exp=1;
						takedamage({dmg:2});
					}
				}
				if(enemies[a].y>770||enemies[a].x>1050||enemies[a].x<-50){
					enemies[a].exp=1;
				}
			},
			ondeath:function(){
				stagetemp.biomeprogress+=1;
			},
			exp:0,
			score:5
		});
	}
	if(stagetemp.biomeprogress>=10){
		sfx.might.rate(random(0.9,1.1));
		sfx.might.volume(options.sfx*2.5);
		sfx.might.play();
		stagetemp.biomecd=600;
		stagetemp.biomestacks+=30;
		biome.id=0;
		bgmt.stop();
		bgm.volume(options.music*bgmv);
		bgm.play();
	}
},
//3: drowned abyss
function(){
	bgcolor(0,0,50);
	biome.timer+=1;
	if(biome.timer<=100){
		bgm.volume((1-biome.timer/100)*options.music*bgmv);
		if(biome.timer==100){
			bgm.pause();
			if(random(1)<0.5){
				setbgmt[2]();
			}
			else{
				setbgmt[3]();
			}
			bgmt.play();
		}
	}
	if((stagetemp.biomeprogress-10>biome.temp.leviathan*30-min(22,gametick/1200)||!(biome.temp.leviathan))&stagetemp.biomeprogress<80&stagetemp.biomeprogress>10){
		if(!(biome.temp.leviathan)){
			biome.temp.leviathan=0;
		}
		biome.temp.leviathan+=1;
		append(objects,{
			x:round(random(1))*1500-300,
			y:random(100,600),
			dur:0,
			dir:-1,
			hitcd:0,
			startup:function(){
				if(objects[a].x<500){
					objects[a].dir=1;
				}
			},
			draw:function(){
				fill(0,0,0,18-abs(objects[a].dur-180)/10);
				for(b=0;b<5+options.graphics*10;b+=1){
					ellipse(500-objects[a].dir*400,objects[a].y,b*27-options.graphics*18,b*45-options.graphics*30);
				}
				shape(sprites.leviathan,objects[a].x,objects[a].y,objects[a].dir*1400,1750);
				fill(0,0,0);
				if(objects[a].dir==-1){
					rect(objects[a].x,objects[a].y-50,1000,100,60);
					rect(objects[a].x+400,objects[a].y,80,150,40);
				}
				else{
					rect(objects[a].x-1000,objects[a].y-50,1000,100,60);
					rect(objects[a].x-480,objects[a].y,80,150,40);
				}
				fill(255,0,0);
				ellipse(objects[a].x,objects[a].y-40,18,12);
			},
			run:function(){
				objects[a].dur+=1;
				if(objects[a].dur>180){
					objects[a].x+=objects[a].dir*8;
					if(objects[a].hitcd>0){
						objects[a].hitcd-=1;
					}
					else{
						if(!(playertemp.phasing>0)){
							if(playerhitbox(objects[a].x,objects[a].y,40)){
								if((objects[a].x<130||objects[a].x>830)&objects[a].dur>300){
									objects[a].hitcd=999;
									player.wither+=4;
									takedamage({dmg:30});
									sfx.finisher.rate(random(0.9,1.1));
									sfx.finisher.volume(options.sfx*2.5);
									sfx.finisher.play();
									smashfx(player.x,player.y);
								}
								else{
									objects[a].hitcd=6;
									player.wither+=1.5;
									takedamage({dmg:5});
									append(objects,{
										dur:6,
										dir:objects[a].dir,
										run:function(){
											player.x+=objects[a].dir*8;
											objects[a].dur-=1;
											if(objects[a].dur<=0){
												objects.splice(a,1);
												a-=1;
											}
										}
									});
									append(objects,{
										dur:15,
										run:function(){
											playertemp.slow=max(playertemp.slow,0.75);
											objects[a].dur-=1;
											if(objects[a].dur<=0){
												objects.splice(a,1);
												a-=1;
											}
										}
									});
								}
							}
						}
					}
				}
				if(objects[a].dur>460){
					player.score+=200;
					objects.splice(a,1);
					a-=1;
				}
			}
		});
	}
	if(gametick%(round(38-min(12,max(0,gametick-7200)/1440))*2)==0){
		if(random(1)<0.2&stagetemp.biomeprogress>=30&stagetemp.biomeprogress<85){
			append(enemies,{
				name:"abyssal demon",
				isTerrain:1,
				hp:250,
				mhp:250,
				size:14,
				x:random(100,900),
				xvelo:random(-0.5,0.5),
				y:-20,
				id:tick%6000,
				eyerand:random(179),
				color:[random(40),random(40),random(40)],
				rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(0,0,0,13);
						for(b=0;b<24;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(0,0,0,54);
						for(b=0;b<6;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],6,6);
					ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],6,6);
					ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],6,6);
					ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],6,6);
					fill(0,0,0);
					ellipse(enemies[a].x,enemies[a].y,25,25);
					fill(255,0,0,max(0,255-abs((tick+enemies[a].eyerand)%180-90)*5));
					ellipse(enemies[a].x-7,enemies[a].y-7,8,5);
					ellipse(enemies[a].x+7,enemies[a].y-7,8,5);
				},
				run:function(){
					if(player.x>enemies[a].x){
						enemies[a].xvelo=min(1.2,enemies[a].xvelo+0.03);
					}
					else{
						enemies[a].xvelo=max(-1.2,enemies[a].xvelo-0.03);
					}
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=0.5;
					if(player.y>enemies[a].y&player.x-enemies[a].x<60&player.x-enemies[a].x>-60){
						enemies[a].y+=1.5;
					}
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							enemies[a].exp=1;
							sfx.wither.rate(random(0.9,1.1));
							sfx.wither.volume(options.sfx*2.5);
							sfx.wither.play();
							if(player.shielding){
								player.wither+=4;
								takedamage({dmg:10});
							}
							else{
								player.wither+=15;
							}
						}
					}
					if(enemies[a].y>770||enemies[a].x>1050||enemies[a].x<-50){
						enemies[a].exp=1;
					}
					if(options.graphics){
						append(particles,{x:enemies[a].x+random(-25,25),y:enemies[a].y+random(-25,25),xvelo:random(-2,2),yvelo:random(-3,-0.5),
						size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[0,0,0]});
					}
				},
				ondeath:function(){
					append(objects,{
						timer:0,
						run:function(){
							objects[a].timer+=1;
							stagetemp.biomeprogress+=0.04;
							if(objects[a].timer>=100){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
				},
				exp:0,
				score:100
			});
		}
		else if(random(1)<0.85-min(0.1,gametick/72000)){
			append(enemies,{
				name:"abyssal rock",
				isTerrain:1,
				hp:90,
				mhp:90,
				size:15,
				x:random(100,900),
				xvelo:random(-0.5,0.5),
				y:-20,
				id:tick%6000,
				color:[random(40),random(40),random(20,80)],
				rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(255,255,255,13);
						for(b=0;b<16;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(255,255,255,54);
						for(b=0;b<4;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					ellipse(enemies[a].x,enemies[a].y,18,18);
					ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,15);
				},
				run:function(){
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=1;
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							enemies[a].exp=1;
							takedamage({dmg:9});
						}
					}
					if(enemies[a].y>770||enemies[a].x>1050||enemies[a].x<-50){
						enemies[a].exp=1;
					}
				},
				ondeath:function(){
					append(objects,{
						timer:0,
						run:function(){
							objects[a].timer+=1;
							stagetemp.biomeprogress+=0.012;
							if(objects[a].timer>=100){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
				},
				onend:function(){
					enemyscripts.abysspool();
				},
				exp:0,
				score:32
			});
		}
		else{
			append(enemies,{
				name:"abyssal drone",
				hp:260,
				mhp:260,
				size:20,
				xvelo:random(-1,1),
				xacc:0,
				x:random(100,900),
				y:-20,
				id:tick%6000,
				ammo:0,
				color:[random(40,70),random(20,50),random(60,90)],
				rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(255,255,255,10);
						for(b=0;b<16;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(255,255,255,40);
						for(b=0;b<4;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					ellipse(enemies[a].x,enemies[a].y,30,22);
					ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],20,15);
					ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,20);
					ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],20,15);
					ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,20);
					fill(255,0,0,75+abs(tick%240-120)*1.5);
					ellipse(enemies[a].x,enemies[a].y,10,10);
				},
				run:function(){
					enemies[a].ammo+=0.6;
					if(enemies[a].ammo>60){
						append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-2,2),
						size:random(7,10),op:random(160,200),opc:-7,exp:1,color:[random(120,150),random(100,130),random(30,55)]});
					}
					if(enemies[a].ammo>90){
						if(random(1)<0.55){
							enemies[a].ammo-=90;
							enemyproj({r:100,g:80,b:20,size:14,speed:4.5,damage:16,dir:PI,source:a});
						}
						else if(random(1)<0.5){
							enemies[a].ammo-=150;
							enemyproj({r:100,g:80,b:20,size:14,speed:4.5,damage:15,dir:PI,source:a});
							enemyproj({r:100,g:80,b:20,size:14,speed:0,damage:16,dir:PI,source:a,misc:{timer:0},
							run:function(){
								projectiles[a].misc.timer+=1;
								if(projectiles[a].misc.timer<=24){
									projectiles[a].speed+=0.1875;
								}
							}});
						}
						else{
							enemies[a].ammo-=180;
							for(b=0;b<3;b+=1){
								enemyproj({r:100,g:80,b:20,size:14,speed:5.5,damage:12,dir:PI-PI/8+b*PI/8,source:a});
							}
						}
					}
					if(random(1)<0.03){
						enemies[a].xacc=random(-0.07,0.07);
					}
					if(enemies[a].x<140){
						enemies[a].xacc=random(0,0.1);
					}
					if(enemies[a].x>860){
						enemies[a].xacc=random(-0.1,0);
					}
					enemies[a].xvelo=min(1.75,max(-1.75,enemies[a].xvelo+enemies[a].xacc));
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=0.35;
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							enemies[a].exp=1;
							takedamage({dmg:14});
						}
					}
					if(enemies[a].y>720){
						enemies[a].exp=1;
					}
				},
				ondeath:function(){
					append(objects,{
						timer:0,
						run:function(){
							objects[a].timer+=1;
							stagetemp.biomeprogress+=0.05;
							if(objects[a].timer>=100){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
				},
				onend:function(){
					enemyscripts.abysspool();
				},
				exp:0,
				score:120
			});
		}
	}
	if(stagetemp.biomeprogress>=100){
		sfx.might.rate(random(0.9,1.1));
		sfx.might.volume(options.sfx*2.5);
		sfx.might.play();
		stagetemp.biomecd=900;
		biome.id=0;
		bgmt.stop();
		bgm.volume(options.music*bgmv);
		bgm.play();
	}
	if(render){
		fill(0,0,0,min(100,biome.timer/5)-max(0,stagetemp.biomeprogress-60)*2.5);
		rect(0,0,1000,700);
	}
	append(objects,{
		draw:function(){
		},
		run:function(){
			if(!(playertemp.waterproof)){
				playertemp.slow=max(playertemp.slow,0.2);
			}
			objects.splice(a,1);
			a-=1;
		}
	});
	for(a=0;a<projectiles.length;a+=1){
		if(!(projectiles[a].abyssslow)){
			projectiles[a].abyssslow=0;
		}
		if(projectiles[a].abyssslow<60){
			projectiles[a].abyssslow+=1;
			projectiles[a].speed*=0.98;
		}
	}
},
//4: disputed space
function(){
	bgcolor(60,0,0);
	biome.timer+=1;
	if(biome.timer<=100){
		bgm.volume((1-biome.timer/100)*options.music*bgmv);
		if(biome.timer==100){
			bgm.pause();
			if(random(1)<0.5){
				setbgmt[6]();
			}
			else{
				setbgmt[7]();
			}
			bgmt.play();
		}
	}
	if(biome.timer<360){
		if(gametick%90==0){
			append(enemies,{
				name:"metallic rock",
				isTerrain:1,
				hp:260,
				mhp:260,
				size:15,
				x:random(100,900),
				xvelo:random(-1,1),
				y:-20,
				id:tick%6000,
				color:[random(100,140),random(100,140),random(100,140)],
				rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
				draw:function(){
					ellipseMode(CENTER);
					if(options.graphics){
						fill(255,255,255,13);
						for(b=0;b<16;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
						}
					}
					else{
						fill(255,255,255,54);
						for(b=0;b<4;b+=1){
							ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
						}
					}
					fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
					ellipse(enemies[a].x,enemies[a].y,18,18);
					ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],15,15);
					ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,15);
				},
				run:function(){
					enemies[a].x+=enemies[a].xvelo;
					enemies[a].y+=2;
					if(!(playertemp.phasing>0)){
						if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
							enemies[a].exp=1;
							takedamage({dmg:14});
						}
					}
					if(enemies[a].y>770||enemies[a].x>1050||enemies[a].x<-50){
						enemies[a].exp=1;
					}
				},
				exp:0,
				score:100
			});
		}
	}
	else if(biome.timer==420){
		append(enemies,{
			name:"World Breaker",
			hp:4000+min(8000,gametick/7.5),
			mhp:4000+min(8000,gametick/7.5),
			size:400,
			isBoss:true,
			yvelo:6,
			yacc:0,
			x:500,
			y:-650,
			contactcd:30,
			timer:0,
			id:tick%6000,
			ammo:0,
			stdm:0.5,
			dmgm:1.5,
			refdmgm:0.8,
			weapons:{
				laser:{x:random(400,850),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,active:0,hitcd:0},
				railgun:{x:random(300,500),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120},
				machinegun:{x:random(100,350),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,active:0,target:random(150,200)},
				bomber:{x:random(300,500),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,target:random(230,280)},
				shotgun:{x:random(200,400),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,rounds:random(2,3),target:random(150,220)},
			},
			dents:[[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)]],
			draw:function(){
				ellipseMode(CENTER);
				//Weapon tethers
				noFill();
				stroke(100+abs(tick%30-15)*2,100+abs(tick%30-15)*2,100+abs(tick%30-15)*2);
				strokeWeight(24);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.laser.x,enemies[a].weapons.laser.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.machinegun.x,enemies[a].weapons.machinegun.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.bomber.x,enemies[a].weapons.bomber.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.shotgun.x,enemies[a].weapons.shotgun.y);
				noStroke();
				//Spikes
				translate(enemies[a].x,enemies[a].y);
				rotate(tick/240);
				fill(90,90,90);
				for(b=0;b<32;b+=1){
					triangle(-30,-395,30,-395,0,-435);
					rotate(PI/16);
				}
				resetMatrix();
				translate(enemies[a].x,enemies[a].y);
				rotate(-tick/100);
				fill(160,160,160);
				for(b=0;b<32;b+=1){
					triangle(-15,-395,15,-395,0,-445);
					rotate(PI/16);
				}
				resetMatrix();
				//Main
				fill(100+abs(tick%120-60)*0.4,100+abs(tick%120-60)*0.4,100+abs(tick%120-60)*0.4);
				ellipse(enemies[a].x,enemies[a].y,800,800);
				//Dents
				fill(0,0,0,60);
				for(b=0;b<15;b+=1){
					ellipse(enemies[a].x+enemies[a].dents[b][0],enemies[a].y+enemies[a].dents[b][1],enemies[a].dents[b][2],enemies[a].dents[b][3]);
				}
				//Health bar
				fill(255,0,0);
				rect(enemies[a].x-200,enemies[a].y+150,400,40);
				fill(0,255,0);
				rect(enemies[a].x-200,enemies[a].y+150,(enemies[a].hp/enemies[a].mhp)*400,40);
				//Laser
				fill(150+enemies[a].weapons.laser.active*105,0,0);
				ellipse(enemies[a].weapons.laser.x,enemies[a].weapons.laser.y,45,45);
				fill(120,120,120);
				stroke(120,120,120);
				strokeWeight(27);
				arc(enemies[a].weapons.laser.x,enemies[a].weapons.laser.y,54,54,PI,PI*2);
				noStroke();
				if(enemies[a].weapons.laser.active){
					fill(255,0,0,180+abs(tick%8-4)*15);
					rect(enemies[a].weapons.laser.x-16,enemies[a].weapons.laser.y+5,32,700);
				}
				//Railgun
				translate(enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y);
				rotate(dirgeneric(enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y,player.x,player.y));
				fill(80,80,80);
				rect(-15,-40,30,80,5);
				fill(0,0,50+enemies[a].weapons.railgun.ammo/10);
				ellipse(0,0,30,30);
				fill(110,110,110);
				rect(-30,-50,16,100,3);
				rect(14,-50,16,100,3);
				resetMatrix();
				//Machinegun
				fill(100,100,100);
				rect(enemies[a].weapons.machinegun.x-15,enemies[a].weapons.machinegun.y-25,30,50,5);
				fill(75,75+abs(tick%90-45)/2,75,205+abs(tick%100-50));
				rect(enemies[a].weapons.machinegun.x-18,enemies[a].weapons.machinegun.y,36,7,3);
				rect(enemies[a].weapons.machinegun.x-18,enemies[a].weapons.machinegun.y+12,36,7,3);
				rect(enemies[a].weapons.machinegun.x-18,enemies[a].weapons.machinegun.y+24,36,7,3);
				//Bomber
				fill(110,90,0);
				rect(enemies[a].weapons.bomber.x-5,enemies[a].weapons.bomber.y-40,10,40,2);
				fill(100,100,100);
				rect(enemies[a].weapons.bomber.x-20,enemies[a].weapons.bomber.y-24,40,48,8);
				ellipse(enemies[a].weapons.bomber.x,enemies[a].weapons.bomber.y+15,50,50);
				fill(0,0,0);
				ellipse(enemies[a].weapons.bomber.x,enemies[a].weapons.bomber.y+15,36,36);
				//Shotgun
			},
			run:function(){
				enemies[a].timer+=1;
				enemies[a].contactcd=max(0,enemies[a].contactcd-1);
				if(enemies[a].timer>200){
					if(player.y<200){
						enemies[a].yacc=0.5;
						if(enemies[a].y>150){
							enemies[a].yacc=0;
							enemies[a].yvelo=0;
						}
					}
					else{
						enemies[a].yacc=-0.5;
						if(enemies[a].y<-150){
							enemies[a].yacc=0;
							enemies[a].yvelo=0;
						}
					}
				}
				enemies[a].xvelo=max(-2,min(2,enemies[a].xvelo+enemies[a].xacc));
				enemies[a].yvelo=max(-2,min(2,enemies[a].yvelo+enemies[a].yacc));
				if(enemies[a].timer<200){
					enemies[a].yacc=0;
					enemies[a].yvelo=2.5;
				}
				enemies[a].y+=enemies[a].yvelo;
				//Weapons
				//bomber
				if(enemies[a].weapons.bomber.y<enemies[a].y+390){
					if(enemies[a].weapons.bomber.yvelo<0){
						enemies[a].weapons.bomber.yvelo=0;
					}
					enemies[a].weapons.bomber.yvelo+=0.1;
				}
				else if(enemies[a].weapons.bomber.y>enemies[a].y+390){
					if(enemies[a].weapons.bomber.yvelo>0){
						enemies[a].weapons.bomber.yvelo=0;
					}
					enemies[a].weapons.bomber.yvelo-=0.1;
				}
				if(tick%6==0){
					if(random(1)<0.1){
						enemies[a].weapons.bomber.xacc=random(-0.4,0.4);
					}
				}
				if(enemies[a].weapons.bomber.x<100){
					enemies[a].weapons.bomber.x=100;
					enemies[a].weapons.bomber.xvelo=random(1);
					enemies[a].weapons.bomber.xacc=random(0.4);
				}
				else if(enemies[a].weapons.bomber.x>900){
					enemies[a].weapons.bomber.x=900;
					enemies[a].weapons.bomber.xvelo=random(-1,0);
					enemies[a].weapons.bomber.xacc=random(-0.4,0);
				}
				enemies[a].weapons.bomber.xvelo=min(2.5,max(-2.5,enemies[a].weapons.bomber.xvelo+enemies[a].weapons.bomber.xacc));
				enemies[a].weapons.bomber.x+=enemies[a].weapons.bomber.xvelo;
				enemies[a].weapons.bomber.y+=enemies[a].weapons.bomber.yvelo;
				enemies[a].weapons.bomber.ammo+=1+min(0.25,gametick/216000);
				if(enemies[a].weapons.bomber.ammo>enemies[a].weapons.bomber.target-60){
					append(particles,{x:enemies[a].weapons.bomber.x+random(-8,8),y:enemies[a].weapons.bomber.y+random(6,12),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[random(30),random(30),random(30)]});
				}
				if(enemies[a].weapons.bomber.ammo>enemies[a].weapons.bomber.target){
					enemies[a].weapons.bomber.ammo-=250;
					enemies[a].weapons.bomber.target=random(230,280);
					append(projectiles,{
						target:0,
						draw:function(){
							ellipseMode(CENTER);
							fill(300-projectiles[a].dur*10,255-projectiles[a].dur*10,100-projectiles[a].dur*10);
							translate(projectiles[a].x,projectiles[a].y);
							ellipse(0,0,30,30);
							if(options.graphics){
								if(projectiles[a].target){
									fill(0,0,255,15);
								}
								else{
									fill(255,0,0,15);
								}
								for(b=0;b<12;b+=1){
									ellipse(0,0,b*8,b*8);
								}
							}
							resetMatrix();
						},
						run:function(){
							if(options.graphics){
								if(tick%2==0){
									append(particles,{x:projectiles[a].x+random(-15,15),y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
									size:8,op:random(120,180),opc:-2,exp:1,color:[random(20),random(20),random(20)]});
								}
								else{
									append(particles,{x:projectiles[a].x+random(-15,15),y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
									size:8,op:random(120,180),opc:-5,exp:1,color:[random(200,255),random(170,200),random(60,100)]});
								}
							}
						},
						onend:function(){
							sfx.bomb.rate(random(0.9,1.1));
							sfx.bomb.volume(options.sfx*0.8);
							sfx.bomb.play();
							for(b=0;b<18;b+=1){
								append(projectiles,{
									target:projectiles[a].target,
									draw:function(){
										ellipseMode(CENTER);
										fill(random(50,300),random(50,255),random(50));
										translate(projectiles[a].x,projectiles[a].y);
										ellipse(0,0,10,10);
										if(options.graphics){
											if(projectiles[a].target){
												fill(0,0,255,15);
											}
											else{
												fill(255,0,0,15);
											}
											for(b=0;b<5;b+=1){
												ellipse(0,0,b*8,b*8);
											}
										}
										resetMatrix();
									},
									run:function(){
										if(options.graphics){
											if(tick%3==0){
												append(particles,{x:projectiles[a].x+random(-15,15),y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
												size:6,op:random(120,180),opc:-4,exp:1,color:[random(20),random(20),random(20)]});
											}
										}
									},
									x:projectiles[a].x,
									y:projectiles[a].y,
									dur:random(50,75),
									pierce:0,
									dir:random(2*PI),
									speed:9,
									scans:2,
									size:8,
									damage:4
								});
							}
						},
						x:enemies[a].weapons.bomber.x,
						y:enemies[a].weapons.bomber.y,
						dur:random(120,150),
						pierce:0,
						dir:PI,
						speed:random(1,4),
						scans:1,
						size:28,
						damage:5
					});
				}
				//Machinegun
				if(enemies[a].weapons.machinegun.y<enemies[a].y+340){
					if(enemies[a].weapons.machinegun.yvelo<0){
						enemies[a].weapons.machinegun.yvelo=0;
					}
					enemies[a].weapons.machinegun.yvelo+=0.1;
				}
				else if(enemies[a].weapons.machinegun.y>enemies[a].y+340){
					if(enemies[a].weapons.machinegun.yvelo>0){
						enemies[a].weapons.machinegun.yvelo=0;
					}
					enemies[a].weapons.machinegun.yvelo-=0.1;
				}
				if(tick%6==0){
					if(random(1)<0.1){
						enemies[a].weapons.machinegun.xacc=random(-0.8,0.8);
					}
				}
				if(enemies[a].weapons.machinegun.x<100){
					enemies[a].weapons.machinegun.x=100;
					enemies[a].weapons.machinegun.xvelo=random(1);
					enemies[a].weapons.machinegun.xacc=random(0.8);
				}
				else if(enemies[a].weapons.machinegun.x>900){
					enemies[a].weapons.machinegun.x=900;
					enemies[a].weapons.machinegun.xvelo=random(-1,0);
					enemies[a].weapons.machinegun.xacc=random(-0.8,0);
				}
				enemies[a].weapons.machinegun.xvelo=min(4.5,max(-4.5,enemies[a].weapons.machinegun.xvelo+enemies[a].weapons.machinegun.xacc));
				enemies[a].weapons.machinegun.x+=enemies[a].weapons.machinegun.xvelo;
				enemies[a].weapons.machinegun.y+=enemies[a].weapons.machinegun.yvelo;
				enemies[a].weapons.machinegun.ammo+=1+min(0.25,gametick/216000);
				if(enemies[a].weapons.machinegun.ammo>enemies[a].weapons.machinegun.target-60){
					append(particles,{x:enemies[a].weapons.machinegun.x+random(-8,8),y:enemies[a].weapons.machinegun.y+random(6,12),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[random(100,130),random(150,200),random(100,130)]});
				}
				if(enemies[a].weapons.machinegun.ammo>enemies[a].weapons.machinegun.target){
					enemies[a].weapons.machinegun.active=1;
					enemies[a].weapons.machinegun.target=random(150,200);
				}
				if(enemies[a].weapons.machinegun.active){
					if(tick%5==0){
						enemies[a].weapons.machinegun.ammo-=20;
						append(projectiles,{
							target:0,
							draw:function(){
								ellipseMode(CENTER);
								fill(255,230,100);
								translate(projectiles[a].x,projectiles[a].y);
								rotate(projectiles[a].dir);
								rect(-4,-12,8,24,8);
								if(options.graphics){
									if(projectiles[a].target){
										fill(0,0,255,15);
									}
									else{
										fill(255,0,0,15);
									}
									for(b=0;b<6;b+=1){
										ellipse(0,0,b*8,b*12);
									}
								}
								resetMatrix();
							},
							run:function(){
								if(options.graphics){
									if(tick%2==0){
										append(particles,{x:projectiles[a].x,y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
										size:8,op:random(120,180),opc:-6,exp:1,color:[random(40,100),random(40,100),random(40,100)]});
									}
									else{
										append(particles,{x:projectiles[a].x,y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
										size:8,op:random(120,180),opc:-6,exp:1,color:[random(200,255),random(200,255),random(100,150)]});
									}
								}
							},
							x:enemies[a].weapons.machinegun.x,
							y:enemies[a].weapons.machinegun.y,
							end:1,
							pierce:0,
							dir:PI+random(-0.2,0.2),
							speed:12,
							scans:2,
							size:8,
							damage:7
						});
					}
					if(enemies[a].weapons.machinegun.ammo<=0){
						enemies[a].weapons.machinegun.active=0;
					}
				}
				//Railgun
				if(enemies[a].weapons.railgun.y<enemies[a].y+370){
					if(enemies[a].weapons.railgun.yvelo<0){
						enemies[a].weapons.railgun.yvelo=0;
					}
					enemies[a].weapons.railgun.yvelo+=0.06;
				}
				else if(enemies[a].weapons.railgun.y>enemies[a].y+370){
					if(enemies[a].weapons.railgun.yvelo>0){
						enemies[a].weapons.railgun.yvelo=0;
					}
					enemies[a].weapons.railgun.yvelo-=0.06;
				}
				if(tick%6==0){
					if(random(1)<0.1){
						enemies[a].weapons.railgun.xacc=random(-0.1,0.1);
					}
				}
				if(enemies[a].weapons.railgun.x<100){
					enemies[a].weapons.railgun.x=100;
					enemies[a].weapons.railgun.xvelo=random(0.5);
					enemies[a].weapons.railgun.xacc=random(0.1);
				}
				else if(enemies[a].weapons.railgun.x>900){
					enemies[a].weapons.railgun.x=900;
					enemies[a].weapons.railgun.xvelo=random(-0.5,0);
					enemies[a].weapons.railgun.xacc=random(-0.1,0);
				}
				enemies[a].weapons.railgun.xvelo=min(1,max(-1,enemies[a].weapons.railgun.xvelo+enemies[a].weapons.railgun.xacc));
				enemies[a].weapons.railgun.x+=enemies[a].weapons.railgun.xvelo;
				enemies[a].weapons.railgun.y+=enemies[a].weapons.railgun.yvelo;
				enemies[a].weapons.railgun.ammo+=1+min(0.5,gametick/108000);
				if(enemies[a].weapons.railgun.ammo>430){
					append(particles,{x:enemies[a].weapons.railgun.x+random(-12,12),y:enemies[a].weapons.railgun.y+random(-12,12),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[random(30),random(30),random(200,255)]});
				}
				if(enemies[a].weapons.railgun.ammo>550){
					enemies[a].weapons.railgun.ammo-=550;
					append(projectiles,{
						target:0,
						draw:function(){
							ellipseMode(CENTER);
							fill(255,230,100);
							translate(projectiles[a].x,projectiles[a].y);
							rotate(projectiles[a].dir);
							rect(-8,-25,16,50,8);
							if(options.graphics){
								if(projectiles[a].target){
									fill(0,0,255,20);
								}
								else{
									fill(255,0,0,20);
								}
								for(b=0;b<7;b+=1){
									ellipse(0,0,b*10,b*15);
								}
							}
							resetMatrix();
						},
						run:function(){
							for(cp=0;cp<2;cp+=1){
								if(options.graphics){
									append(particles,{x:projectiles[a].x,y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
									size:8,op:random(120,180),opc:-6,exp:1,color:[random(40,100),random(40,100),random(40,100)]});
									append(particles,{x:projectiles[a].x,y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
									size:8,op:random(120,180),opc:-6,exp:1,color:[random(150,200),random(150,200),random(40,100)]});
								}
							}
						},
						onhit:function(){
							if(projectiles[a].target){
								sfx.finisher.rate(random(0.9,1.1));
								sfx.finisher.volume(options.sfx*3);
								sfx.finisher.play();
								projectiles[a].damage*=5;
							}
							else if(!(player.shielding)){
								sfx.finisher.rate(random(0.9,1.1));
								sfx.finisher.volume(options.sfx*3);
								sfx.finisher.play();
								player.stun=max(player.stun,40);
								append(objects,{
									dur:40,
									x:player.x,
									y:player.y,
									dir:projectiles[a].dir,
									run:function(){
										if(objects[a].dur>10){
											player.x=objects[a].x+random(-8,8);
											player.y=objects[a].y+random(-8,8);
										}
										else{
											if(objects[a].dur==10){
												player.x=objects[a].x;
												player.y=objects[a].y;
											}
											player.x+=sin(objects[a].dir)*2000/(player.mhp+20);
											player.y-=cos(objects[a].dir)*2000/(player.mhp+20);
										}
										objects[a].dur-=1;
										if(objects[a].dur<=0){
											objects.splice(a,1);
											a-=1;
										}
									}
								});
							}
							smashfx(projectiles[a].x,projectiles[a].y);
						},
						x:enemies[a].weapons.railgun.x,
						y:enemies[a].weapons.railgun.y,
						end:1,
						pierce:0,
						dir:dirgeneric(enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y,player.x,player.y),
						speed:30,
						scans:3,
						size:20,
						damage:50
					});
				}
				//Laser
				if(enemies[a].weapons.laser.y<enemies[a].y+350){
					if(enemies[a].weapons.laser.yvelo<0){
						enemies[a].weapons.laser.yvelo=0;
					}
					enemies[a].weapons.laser.yvelo+=0.06;
				}
				else if(enemies[a].weapons.laser.y>enemies[a].y+350){
					if(enemies[a].weapons.laser.yvelo>0){
						enemies[a].weapons.laser.yvelo=0;
					}
					enemies[a].weapons.laser.yvelo-=0.06;
				}
				if(tick%6==0){
					if(random(1)<0.1){
						enemies[a].weapons.laser.xacc=random(-0.3,0.3);
					}
				}
				if(enemies[a].weapons.laser.x<100){
					enemies[a].weapons.laser.x=100;
					enemies[a].weapons.laser.xvelo=random(1);
					enemies[a].weapons.laser.xacc=random(0.3);
				}
				else if(enemies[a].weapons.laser.x>900){
					enemies[a].weapons.laser.x=900;
					enemies[a].weapons.laser.xvelo=random(-1,0);
					enemies[a].weapons.laser.xacc=random(-0.3,0);
				}
				enemies[a].weapons.laser.xvelo=min(2,max(-2,enemies[a].weapons.laser.xvelo+enemies[a].weapons.laser.xacc));
				if(!(enemies[a].weapons.laser.active)){
					enemies[a].weapons.laser.x+=enemies[a].weapons.laser.xvelo;
				}
				enemies[a].weapons.laser.y+=enemies[a].weapons.laser.yvelo;
				enemies[a].weapons.laser.ammo+=1+min(0.25,gametick/216000);
				if(enemies[a].weapons.laser.ammo>130){
					append(particles,{x:enemies[a].weapons.laser.x+random(-15,15),y:enemies[a].weapons.laser.y+random(15),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(9,12),op:random(160,200),opc:-7,exp:1,color:[255,random(30),random(30)]});
					
				}
				if(enemies[a].weapons.laser.hitcd>0){
					enemies[a].weapons.laser.hitcd-=1;
				}
				if(enemies[a].weapons.laser.ammo>200){
					enemies[a].weapons.laser.active=1;
				}
				if(enemies[a].weapons.laser.active){
					enemies[a].weapons.laser.ammo-=2.25;
					if(enemies[a].weapons.laser.ammo<=0){
						enemies[a].weapons.laser.active=0;
					}
					if(!(playertemp.phasing>0)){
						if(enemies[a].weapons.laser.hitcd<=0&player.x-enemies[a].weapons.laser.x<16+player.size&player.x-enemies[a].weapons.laser.x>-16-player.size&player.y-enemies[a].weapons.laser.y>-player.size){
							enemies[a].weapons.laser.hitcd=3;
							takedamage({dmg:4});
						}
					}
				}
				//Sawblades
				if(!(playertemp.phasing>0)){
					if(playerhitbox(enemies[a].x,enemies[a].y,45+enemies[a].size)){
						if(pow(player.x-enemies[a].x,2)+pow(player.y-enemies[a].y,2)<pow(45+player.size+enemies[a].size,2)){
							if(enemies[a].contactcd<=0){
								enemies[a].contactcd=10;
								player.y+=10;
								takedamage({dmg:10});
							}
						}
					}
				}
				if(enemies[a].y>750||enemies[a].y<-700){
					enemies[a].exp=1;
				}
			},
			onend:function(){
				sfx.might.rate(random(0.9,1.1));
				sfx.might.volume(options.sfx*2.5);
				sfx.might.play();
				stagetemp.biomecd=900;
				biome.id=0;
				bgmt.stop();
				bgm.volume(options.music*bgmv);
				bgm.play();
			},
			exp:0,
			score:round(2000+min(6000,gametick/10))*2
		});
	}
}/*,
//5: the void
function(){
	bgcolor(0,0,0);
	biome.timer+=1;
	if(biome.timer<=100){
		bgm.volume((1-biome.timer/100)*options.music*bgmv);
		if(biome.timer==100){
			bgm.pause();
			if(random(1)<0.5){
				setbgmt[8]();
			}
			else{
				setbgmt[9]();
			}
			bgmt.play();
		}
	}
	biome.temp.obscurestars=min(12,biome.timer/30);
	if(gametick%round(300-min(120,max(0,(gametick-28800))/360))==0){
		
	}
	if(biome.timer<4000){
		if(gametick%round(80-min(24,max(0,(gametick-28800))/1800))==0){
			if(random(1)<2){
				append(enemies,{
					name:"glowy rock",
					isTerrain:1,
					hp:200,
					mhp:200,
					size:15,
					x:random(100,900),
					xvelo:random(-0.8,0.8),
					y:-20,
					id:tick%6000,
					glowv:round(random(89)),
					color:[random(140,255),random(220,255),random(180,255)],
					rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
					draw:function(){
						ellipseMode(CENTER);
						if(options.graphics){
							fill(255,255,255,13);
							for(b=0;b<16;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*(5+abs(tick%90-45)/15),b*(5+abs((tick+enemies[a].glowv)%90-45)/15));
							}
						}
						else{
							fill(255,255,255,54);
							for(b=0;b<4;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*4*(5+abs(tick%90-45)/15),b*4*(5+abs((tick+enemies[a].glowv)%90-45)/15));
							}
						}
						fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
						ellipse(enemies[a].x,enemies[a].y,18,18);
						ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],15,15);
						ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,15);
					},
					run:function(){
						enemies[a].x+=enemies[a].xvelo;
						enemies[a].y+=1.6;
						if(!(playertemp.phasing>0)){
							if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
								enemies[a].exp=1;
								takedamage({dmg:13});
							}
						}
						if(enemies[a].y>770||enemies[a].x>1050||enemies[a].x<-50){
							enemies[a].exp=1;
						}
					},
					exp:0,
					score:80
				});
			}
			else{
				append(enemies,{
					name:"abyssal drone",
					hp:260,
					mhp:260,
					size:20,
					xvelo:random(-1,1),
					xacc:0,
					x:random(100,900),
					y:-20,
					id:tick%6000,
					ammo:0,
					color:[random(40,70),random(20,50),random(60,90)],
					rockpos:[[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)],[random(-20,20),random(-20,20)]],
					draw:function(){
						ellipseMode(CENTER);
						if(options.graphics){
							fill(255,255,255,10);
							for(b=0;b<16;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*5,b*5);
							}
						}
						else{
							fill(255,255,255,40);
							for(b=0;b<4;b+=1){
								ellipse(enemies[a].x,enemies[a].y,b*20,b*20);
							}
						}
						fill(enemies[a].color[0],enemies[a].color[1],enemies[a].color[2]);
						ellipse(enemies[a].x,enemies[a].y,30,22);
						ellipse(enemies[a].x+enemies[a].rockpos[0][0],enemies[a].y+enemies[a].rockpos[0][1],20,15);
						ellipse(enemies[a].x+enemies[a].rockpos[1][0],enemies[a].y+enemies[a].rockpos[1][1],15,20);
						ellipse(enemies[a].x+enemies[a].rockpos[2][0],enemies[a].y+enemies[a].rockpos[2][1],20,15);
						ellipse(enemies[a].x+enemies[a].rockpos[3][0],enemies[a].y+enemies[a].rockpos[3][1],15,20);
						fill(255,0,0,75+abs(tick%240-120)*1.5);
						ellipse(enemies[a].x,enemies[a].y,10,10);
					},
					run:function(){
						enemies[a].ammo+=0.6;
						if(enemies[a].ammo>60){
							append(particles,{x:enemies[a].x+random(-enemies[a].size,enemies[a].size),y:enemies[a].y+random(enemies[a].size),xvelo:random(-2,2),yvelo:random(-2,2),
							size:random(7,10),op:random(160,200),opc:-7,exp:1,color:[random(120,150),random(100,130),random(30,55)]});
						}
						if(enemies[a].ammo>90){
							if(random(1)<0.55){
								enemies[a].ammo-=90;
								enemyproj({r:100,g:80,b:20,size:14,speed:4.5,damage:16,dir:PI,source:a});
							}
							else if(random(1)<0.5){
								enemies[a].ammo-=150;
								enemyproj({r:100,g:80,b:20,size:14,speed:4.5,damage:15,dir:PI,source:a});
								enemyproj({r:100,g:80,b:20,size:14,speed:0,damage:16,dir:PI,source:a,misc:{timer:0},
								run:function(){
									projectiles[a].misc.timer+=1;
									if(projectiles[a].misc.timer<=24){
										projectiles[a].speed+=0.1875;
									}
								}});
							}
							else{
								enemies[a].ammo-=180;
								for(b=0;b<3;b+=1){
									enemyproj({r:100,g:80,b:20,size:14,speed:5.5,damage:12,dir:PI-PI/8+b*PI/8,source:a});
								}
							}
						}
						if(random(1)<0.03){
							enemies[a].xacc=random(-0.07,0.07);
						}
						if(enemies[a].x<140){
							enemies[a].xacc=random(0,0.1);
						}
						if(enemies[a].x>860){
							enemies[a].xacc=random(-0.1,0);
						}
						enemies[a].xvelo=min(1.75,max(-1.75,enemies[a].xvelo+enemies[a].xacc));
						enemies[a].x+=enemies[a].xvelo;
						enemies[a].y+=0.35;
						if(!(playertemp.phasing>0)){
							if(playerhitbox(enemies[a].x,enemies[a].y,enemies[a].size)){
								enemies[a].exp=1;
								takedamage({dmg:14});
							}
						}
						if(enemies[a].y>720){
							enemies[a].exp=1;
						}
					},
					ondeath:function(){
						append(objects,{
							timer:0,
							run:function(){
								objects[a].timer+=1;
								stagetemp.biomeprogress+=0.05;
								if(objects[a].timer>=100){
									objects.splice(a,1);
									a-=1;
								}
							}
						});
					},
					onend:function(){
						enemyscripts.abysspool();
					},
					exp:0,
					score:120
				});
			}
		}
	}
	else if(biome.timer==4200){
		append(enemies,{
			name:"World Breaker",
			hp:4000+min(8000,gametick/7.5),
			mhp:4000+min(8000,gametick/7.5),
			size:400,
			isBoss:true,
			yvelo:6,
			yacc:0,
			x:500,
			y:-650,
			contactcd:30,
			timer:0,
			id:tick%6000,
			ammo:0,
			stdm:0.5,
			dmgm:1.5,
			refdmgm:0.8,
			weapons:{
				laser:{x:random(400,850),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,active:0,hitcd:0},
				railgun:{x:random(300,500),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120},
				machinegun:{x:random(100,350),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,active:0,target:random(150,200)},
				bomber:{x:random(300,500),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,target:random(230,280)},
				shotgun:{x:random(200,400),y:-350,xvelo:0,xacc:0,yvelo:1,ammo:-120,rounds:random(2,3),target:random(150,220)},
			},
			dents:[[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)],[random(-250,250),random(300),random(10,40),random(10,40)]],
			draw:function(){
				ellipseMode(CENTER);
				//Weapon tethers
				noFill();
				stroke(100+abs(tick%30-15)*2,100+abs(tick%30-15)*2,100+abs(tick%30-15)*2);
				strokeWeight(24);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.laser.x,enemies[a].weapons.laser.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.machinegun.x,enemies[a].weapons.machinegun.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.bomber.x,enemies[a].weapons.bomber.y);
				line(enemies[a].x,enemies[a].y,enemies[a].weapons.shotgun.x,enemies[a].weapons.shotgun.y);
				noStroke();
				//Spikes
				translate(enemies[a].x,enemies[a].y);
				rotate(tick/240);
				fill(90,90,90);
				for(b=0;b<32;b+=1){
					triangle(-30,-395,30,-395,0,-435);
					rotate(PI/16);
				}
				resetMatrix();
				translate(enemies[a].x,enemies[a].y);
				rotate(-tick/100);
				fill(160,160,160);
				for(b=0;b<32;b+=1){
					triangle(-15,-395,15,-395,0,-445);
					rotate(PI/16);
				}
				resetMatrix();
				//Main
				fill(100+abs(tick%120-60)*0.4,100+abs(tick%120-60)*0.4,100+abs(tick%120-60)*0.4);
				ellipse(enemies[a].x,enemies[a].y,800,800);
				//Dents
				fill(0,0,0,60);
				for(b=0;b<15;b+=1){
					ellipse(enemies[a].x+enemies[a].dents[b][0],enemies[a].y+enemies[a].dents[b][1],enemies[a].dents[b][2],enemies[a].dents[b][3]);
				}
				//Health bar
				fill(255,0,0);
				rect(enemies[a].x-200,enemies[a].y+150,400,40);
				fill(0,255,0);
				rect(enemies[a].x-200,enemies[a].y+150,(enemies[a].hp/enemies[a].mhp)*400,40);
				//Laser
				fill(150+enemies[a].weapons.laser.active*105,0,0);
				ellipse(enemies[a].weapons.laser.x,enemies[a].weapons.laser.y,45,45);
				fill(120,120,120);
				stroke(120,120,120);
				strokeWeight(27);
				arc(enemies[a].weapons.laser.x,enemies[a].weapons.laser.y,54,54,PI,PI*2);
				noStroke();
				if(enemies[a].weapons.laser.active){
					fill(255,0,0,180+abs(tick%8-4)*15);
					rect(enemies[a].weapons.laser.x-16,enemies[a].weapons.laser.y+5,32,700);
				}
				//Railgun
				translate(enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y);
				rotate(dirgeneric(enemies[a].weapons.railgun.x,enemies[a].weapons.railgun.y,player.x,player.y));
				fill(80,80,80);
				rect(-15,-40,30,80,5);
				fill(0,0,50+enemies[a].weapons.railgun.ammo/10);
				ellipse(0,0,30,30);
				fill(110,110,110);
				rect(-30,-50,16,100,3);
				rect(14,-50,16,100,3);
				resetMatrix();
				//Machinegun
				fill(100,100,100);
				rect(enemies[a].weapons.machinegun.x-15,enemies[a].weapons.machinegun.y-25,30,50,5);
				fill(75,75+abs(tick%90-45)/2,75,205+abs(tick%100-50));
				rect(enemies[a].weapons.machinegun.x-18,enemies[a].weapons.machinegun.y,36,7,3);
				rect(enemies[a].weapons.machinegun.x-18,enemies[a].weapons.machinegun.y+12,36,7,3);
				rect(enemies[a].weapons.machinegun.x-18,enemies[a].weapons.machinegun.y+24,36,7,3);
				//Bomber
				fill(110,90,0);
				rect(enemies[a].weapons.bomber.x-5,enemies[a].weapons.bomber.y-40,10,40,2);
				fill(100,100,100);
				rect(enemies[a].weapons.bomber.x-20,enemies[a].weapons.bomber.y-24,40,48,8);
				ellipse(enemies[a].weapons.bomber.x,enemies[a].weapons.bomber.y+15,50,50);
				fill(0,0,0);
				ellipse(enemies[a].weapons.bomber.x,enemies[a].weapons.bomber.y+15,36,36);
				//Shotgun
			},
			run:function(){
				enemies[a].timer+=1;
				enemies[a].contactcd=max(0,enemies[a].contactcd-1);
				if(enemies[a].timer>200){
					if(player.y<200){
						enemies[a].yacc=0.5;
						if(enemies[a].y>150){
							enemies[a].yacc=0;
							enemies[a].yvelo=0;
						}
					}
					else{
						enemies[a].yacc=-0.5;
						if(enemies[a].y<-150){
							enemies[a].yacc=0;
							enemies[a].yvelo=0;
						}
					}
				}
				enemies[a].xvelo=max(-2,min(2,enemies[a].xvelo+enemies[a].xacc));
				enemies[a].yvelo=max(-2,min(2,enemies[a].yvelo+enemies[a].yacc));
				if(enemies[a].timer<200){
					enemies[a].yacc=0;
					enemies[a].yvelo=2.5;
				}
				enemies[a].y+=enemies[a].yvelo;
				if(!(playertemp.phasing>0)){
					if(playerhitbox(enemies[a].x,enemies[a].y,45+enemies[a].size)){
						if(pow(player.x-enemies[a].x,2)+pow(player.y-enemies[a].y,2)<pow(45+player.size+enemies[a].size,2)){
							if(enemies[a].contactcd<=0){
								enemies[a].contactcd=10;
								player.y+=10;
								takedamage({dmg:10});
							}
						}
					}
				}
				if(enemies[a].y>750||enemies[a].y<-700){
					enemies[a].exp=1;
				}
			},
			onend:function(){
				sfx.might.rate(random(0.9,1.1));
				sfx.might.volume(options.sfx*2.5);
				sfx.might.play();
				stagetemp.biomecd=900;
				biome.id=0;
				bgmt.stop();
				bgm.volume(options.music*bgmv);
				bgm.play();
			},
			exp:0,
			score:round(2000+min(6000,gametick/10))*2
		});
	}
}*/
];
var shoot=[
	function(){
		if(playertemp.hawkblitz>0){
			player.shootcd=3;
		}
		else{
			player.shootcd=6;
		}
		if(player.ammo>3.6){
			player.ammo-=3.6;
			for(b=0;b<2;b+=1){
				append(projectiles,{
					target:1,
					draw:function(){
						ellipseMode(CENTER);
						fill(255,230,100);
						rect(projectiles[a].x-4,projectiles[a].y-15,8,30,4);
						if(options.graphics){
							fill(255,190,140,10);
							for(b=0;b<10;b+=1){
								ellipse(projectiles[a].x,projectiles[a].y,8+b*2,34+b*4);
							}
						}
					},
					x:player.x-10+b*20,
					y:player.y,
					end:1,
					pierce:0,
					dir:0,
					speed:50,
					scans:6,
					size:9,
					damage:15,
					isSingleTarget:true,
					basicAttack:true
				});
			}
			if(options.graphics){
				for(cp=0;cp<9;cp+=1){
					append(particles,{x:player.x-12,y:player.y-18,xvelo:random(-2,2),yvelo:random(-20,-5),
					size:6,op:random(200,255),opc:-25,exp:1,color:[random(240,255),random(180,230),random(30,90)]});
				}
				for(cp=0;cp<9;cp+=1){
					append(particles,{x:player.x+12,y:player.y-18,xvelo:random(-2,2),yvelo:random(-20,-5),
					size:6,op:random(200,255),opc:-25,exp:1,color:[random(240,255),random(180,230),random(30,90)]});
				}
			}
			sfx.minigun.rate(random(0.9,1.1));
			sfx.minigun.volume(options.sfx*0.32);
			sfx.minigun.play();
		}
		else{
			if(player.mods[8]){
				player.shield=max(0,player.shield-2);
			}
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.4);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=15;
		if(player.ammo>9){
			player.ammo-=9;
			append(projectiles,{
				target:1,
				draw:function(){
					ellipseMode(CENTER);
					fill(180,200,255);
					triangle(projectiles[a].x-10,projectiles[a].y,projectiles[a].x+10,projectiles[a].y,projectiles[a].x,projectiles[a].y-15);
					triangle(projectiles[a].x-10,projectiles[a].y,projectiles[a].x+10,projectiles[a].y,projectiles[a].x,projectiles[a].y+15);
					if(options.graphics){
						fill(200,200,255,10);
						for(b=0;b<10;b+=1){
							ellipse(projectiles[a].x,projectiles[a].y,10+b*4,10+b*4);
						}
					}
				},
				x:player.x,
				y:player.y,
				end:1,
				pierce:0,
				dir:0,
				speed:20,
				scans:2,
				size:16,
				damage:70,
				basicAttack:true,
				run:function(){
					if(options.graphics){
						append(particles,{x:projectiles[a].x,y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
						size:8,op:random(170,200),opc:-5,exp:1,color:[random(170,200),random(170,200),random(200,255)]});
					}
				},
				onend:function(){
					sfx.glacialhit.rate(random(0.9,1.1));
					sfx.glacialhit.volume(options.sfx*0.2);
					sfx.glacialhit.play();
					for(b=0;b<12;b+=1){
						append(projectiles,{
							target:1,
							draw:function(){
								ellipseMode(CENTER);
								fill(180,200,255);
								triangle(projectiles[a].x-6,projectiles[a].y,projectiles[a].x+6,projectiles[a].y,projectiles[a].x,projectiles[a].y-10);
								triangle(projectiles[a].x-6,projectiles[a].y,projectiles[a].x+6,projectiles[a].y,projectiles[a].x,projectiles[a].y+10);
								if(options.graphics){
									fill(200,200,255,10);
									for(b=0;b<8;b+=1){
										ellipse(projectiles[a].x,projectiles[a].y,7+b*2.5,7+b*2.5);
									}
								}
							},
							x:projectiles[a].x,
							y:projectiles[a].y,
							hits:projectiles[a].hits,
							dur:random(8,13),
							pierce:0,
							dir:random(2*PI),
							speed:random(15,20),
							scans:2,
							size:14,
							damage:random(15,40),
							basicAttack:true
						});
					}
				}
			});
			sfx.glacialshoot.rate(random(0.9,1.1));
			sfx.glacialshoot.volume(options.sfx*0.2);
			sfx.glacialshoot.play();
		}
		else{
			if(player.mods[8]){
				player.shield=max(0,player.shield-4.5);
			}
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.45);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=6;
		if(player.ammo>4){
			player.ammo-=4;
			append(projectiles,{
				target:1,
				draw:function(){
					ellipseMode(CENTER);
					fill(20,140,60);
					ellipse(projectiles[a].x,projectiles[a].y+20+projectiles[a].size,projectiles[a].size,projectiles[a].size);
					ellipse(projectiles[a].x,projectiles[a].y,projectiles[a].size*2,projectiles[a].size*2);
					if(options.graphics){
						fill(70,200,50,10);
						for(b=0;b<6;b+=1){
							ellipse(projectiles[a].x,projectiles[a].y,projectiles[a].size*2+b*2,projectiles[a].size*2+b*4);
						}
						append(particles,{x:projectiles[a].x+random(-projectiles[a].size,projectiles[a].size),y:projectiles[a].y+random(-projectiles[a].size,projectiles[a].size),xvelo:random(-5,5),yvelo:random(-8,-3),
						size:random(7,10),op:random(180,220),opc:-12,exp:1,color:[random(40,60),random(100,120),random(70,90)]});
					}
				},
				run:function(){
					projectiles[a].size+=2;
				},
				x:player.x,
				y:player.y,
				dur:18,
				pierce:999,
				dir:0,
				speed:15,
				scans:2,
				size:15,
				damage:13,
				basicAttack:true
			});
			for(b=-1;b<3;b+=1){
				append(projectiles,{
					target:1,
					draw:function(){
						ellipseMode(CENTER);
						fill(20,140,60,150);
						ellipse(projectiles[a].x,projectiles[a].y,projectiles[a].size*2,projectiles[a].size*2);
						if(options.graphics){
							fill(70,200,50,10);
							for(b=0;b<6;b+=1){
								ellipse(projectiles[a].x,projectiles[a].y,projectiles[a].size*2+b*2,projectiles[a].size*2+b*4);
							}
							if(tick%2==0){
								append(particles,{x:projectiles[a].x+random(-projectiles[a].size,projectiles[a].size),y:projectiles[a].y+random(-projectiles[a].size,projectiles[a].size),xvelo:random(-5,5),yvelo:random(-8,-3),
								size:random(7,10),op:random(180,220),opc:-12,exp:1,color:[random(40,60),random(100,120),random(70,90)]});
							}
						}
					},
					run:function(){
						projectiles[a].size+=2;
					},
					x:player.x,
					y:player.y,
					dur:10,
					pierce:999,
					dir:b*PI/3-PI/6,
					speed:15,
					scans:2,
					size:20,
					damage:8,
					basicAttack:true
				});
			}
			sfx.incinerate.rate(random(0.93,1.07));
			sfx.incinerate.volume(options.sfx*0.9);
			sfx.incinerate.play();
		}
		else{
			if(player.mods[8]){
				player.shield=max(0,player.shield-2);
			}
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.35);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=7;
		if(player.ammo>4){
			player.ammo-=4;
			append(projectiles,{
				target:1,
				draw:function(){
					ellipseMode(CENTER);
					fill(255,0,0);
					rect(projectiles[a].x-7,projectiles[a].y-20,14,40);
					if(options.graphics){
						fill(255,0,0,10);
						for(b=0;b<10;b+=1){
							ellipse(projectiles[a].x,projectiles[a].y,10+b*2,30+b*5);
						}
					}
				},
				x:player.x,
				y:player.y-35,
				end:1,
				pierce:1,
				dir:0,
				speed:28,
				scans:3,
				size:15,
				damage:18,
				isSingleTarget:true,
				basicAttack:true
			});
			for(b=0;b<2;b+=1){
				append(projectiles,{
					target:1,
					draw:function(){
						ellipseMode(CENTER);
						fill(255,0,0);
						ellipse(projectiles[a].x,projectiles[a].y,15,15);
						if(options.graphics){
							fill(255,0,0,10);
							for(b=0;b<10;b+=1){
								ellipse(projectiles[a].x,projectiles[a].y,10+b*3,10+b*3);
							}
						}
					},
					x:player.x,
					y:player.y-35,
					dur:30,
					pierce:0,
					dir:b*PI/4-PI/8+random(-PI/4,PI/4),
					speed:20,
					scans:2,
					size:15,
					damage:13,
					basicAttack:true,
					isSingleTarget:true
				});
			}
			if(options.graphics){
				for(cp=0;cp<15;cp+=1){
					append(particles,{x:player.x,y:player.y-45,xvelo:random(-6,6),yvelo:random(-12,-5),
					size:6,op:random(200,255),opc:-16,exp:1,color:[255,random(40),random(40)]});
				}
			}
			sfx.laser.rate(random(0.85,1.16));
			sfx.laser.volume(options.sfx*1.8);
			sfx.laser.play();
		}
		else{
			if(player.mods[8]){
				player.shield=max(0,player.shield-2);
			}
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.35);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=4;
		if(player.ammo>3){
			player.ammo-=3;
			append(projectiles,{
				target:1,
				timer:0,
				draw:function(){
					ellipseMode(CENTER);
					fill(255,255,255);
					translate(projectiles[a].x,projectiles[a].y);
					rotate(projectiles[a].timer/4);
					rect(-5,-5,10,10,2);
					resetMatrix();
					if(options.graphics){
						fill(255,255,255,20);
						for(b=0;b<5;b+=1){
							ellipse(projectiles[a].x,projectiles[a].y,8+b*4,8+b*4);
						}
					}
				},
				run:function(){
					projectiles[a].timer+=1;
				},
				onhit:function(b){
					if(!(enemies[b].papershards)){
						enemies[b].papershards=new Array();
					}
					if(enemies[b].papershards.length<50){
						append(enemies[b].papershards,{x:random(-enemies[b].size,enemies[b].size),y:random(-enemies[b].size,enemies[b].size),rot:random(2*PI)});
						projectiles[a].damage=10*(1+min(1.5,enemies[b].papershards.length/5));
					}
				},
				x:player.x,
				y:player.y,
				end:1,
				pierce:0,
				dir:0,
				speed:15,
				scans:3,
				size:6,
				damage:10,
				isSingleTarget:true,
				basicAttack:true
			});
			if(options.graphics){
				for(cp=0;cp<12;cp+=1){
					append(particles,{x:player.x,y:player.y-2,xvelo:random(-2,2),yvelo:random(-20,-5),
					size:6,op:random(200,255),opc:-25,exp:1,color:[random(240,255),random(240,255),random(240,255)]});
				}
			}
			sfx.paper.rate(random(0.7,1.4));
			sfx.paper.volume(options.sfx*0.8);
			sfx.paper.play();
		}
		else{
			if(player.mods[8]){
				player.shield=max(0,player.shield-1.5);
			}
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.4);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=12;
		if(player.ammo>8){
			player.ammo-=8;
			append(objects,{
				dur:15,
				dir:random(2*PI),
				dirc:round(random(1))*2-1,
				draw:function(){
					fill(110+abs(tick%40-20)*2,110,110,170);
					translate(player.x,player.y);
					rotate(objects[a].dir);
					rect(-100,-15,200,30);
					triangle(-100,-15,-100,15,-125,0);
					triangle(100,-15,100,15,125,0);
					resetMatrix();
				},
				run:function(){
					if(objects[a].dur%6==2){
						for(b=0;b<enemies.length;b+=1){
							if(hitbox(player.x,player.y,enemies[b].x,enemies[b].y,125+enemies[b].size)){
								if(pow(enemies[b].x-player.x,2)+pow(enemies[b].y-player.y,2)<pow(125+enemies[b].size,2)){
									enemies[b].hp-=dealdamage(14,b,{basicAttack:1});
									sfx.hit.rate(random(0.8,1.2));
									sfx.hit.volume(options.sfx*0.7);
									sfx.hit.play();
									for(cp=0;cp<7;cp+=1){
										append(particles,{x:enemies[b].x+random(-enemies[b].size,enemies[b].size),y:enemies[b].y+random(-enemies[b].size,enemies[b].size),xvelo:random(-2,2),yvelo:random(-2,2),
										size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(120,160),random(70,120)]});
									}
								}
							}
						}
					}
					objects[a].dur-=1;
					objects[a].dir+=objects[a].dirc/2;
					if(objects[a].dur<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
			if(playertemp.empoweredblade>0&!(playertemp.empoweredbladecd>0)){
				playertemp.empoweredblade-=1;
				playertemp.empoweredbladecd=1;
				append(projectiles,{
					target:1,
					draw:function(){
						fill(100+abs(tick%44-22)*5,100,100+abs((tick+22)%44-22)*5,190);
						rect(projectiles[a].x-15,projectiles[a].y-60,30,120);
						triangle(projectiles[a].x-15,projectiles[a].y-60,projectiles[a].x+15,projectiles[a].y-60,projectiles[a].x,projectiles[a].y-80);
						rect(projectiles[a].x-40,projectiles[a].y+10,80,20);
					},
					x:player.x,
					y:player.y,
					dir:0,
					pierce:999,
					end:1,
					speed:15,
					scans:1,
					size:80,
					damage:250,
					basicAttack:true
				});
				sfx.blades.volume(options.sfx*1);
			}
			else{
				sfx.blades.volume(options.sfx*0.5);
			}
			sfx.blades.rate(random(0.7,1.4));
			sfx.blades.play();
		}
		else{
			if(player.mods[8]){
				player.shield=max(0,player.shield-4);
			}
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.4);
			sfx.click.play();
		}
	},
];
var special=[
	function(){
		player.shootcd=5;
		player.specialcd=15;
		if(player.energy>=1){
			player.shootcd=20;
			player.specialcd=60;
			player.energy-=1;
			playertemp.hawkblitz=90;
			append(objects,{
				dur:90,
				run:function(){
					objects[a].dur-=1;
					player.ammo=min(100,player.ammo+1);
					if(objects[a].dur<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
			append(projectiles,{
				target:1,
				draw:function(){
					ellipseMode(CENTER);
					noFill();
					strokeWeight(6);
					stroke(180,70,180,min(5,projectiles[a].dur/2)*30);
					for(b=0;b<11-projectiles[a].dur/6;b+=1){
						ellipse(projectiles[a].x,projectiles[a].y,20+20*b,20+20*b);
					}
					noStroke();
				},
				run:function(){
					projectiles[a].size+=1.5;
					for(b=0;b<projectiles.length;b+=1){
						if(projectiles[b].target==0&!(projectiles[b].reflected)){
							if(pow(projectiles[b].x-projectiles[a].x,2)+pow(projectiles[b].y-projectiles[a].y,2)<pow(45+projectiles[a].size+projectiles[b].size,2)){
								projectiles[b].speed*=2;
								projectiles[b].scans*=2;
								projectiles[b].damage*=1.5;
								projectiles[b].dir+=PI;
								projectiles[b].reflected=1;
								projectiles[b].target=1;
							}
						}
					}
					if(tick%5==0){
						projectiles[a].hits=new Array();
					}
				},
				onhit:function(target){
					if(enemies[target].isBoss){
						projectiles[a].exp=1;
						projectiles[a].damage=100;
					}
					else{
						enemies[target].y-=10;
					}
				},
				x:player.x,
				y:player.y,
				end:0,
				pierce:9999,
				dur:60,
				dir:0,
				speed:2,
				size:5,
				damage:20
			});
			sfx.hawk.rate(random(0.9,1.1));
			sfx.hawk.volume(options.sfx);
			sfx.hawk.play();
		}
		else{
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.6);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=5;
		player.specialcd=15;
		if(player.energy>=1){
			player.shootcd=20;
			player.specialcd=60;
			player.energy-=1;
			sfx.distortion.rate(random(0.9,1.1));
			sfx.distortion.volume(options.sfx*0.9);
			sfx.distortion.play();
			playertemp.crystalstorm=60;
		}
		else{
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.6);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=5;
		player.specialcd=15;
		if(player.energy>=1){
			player.shootcd=30;
			player.specialcd=90;
			player.energy-=1;
			sfx.might.rate(random(0.9,1.1));
			sfx.might.volume(options.sfx*1.8);
			sfx.might.play();
			playertemp.ragingspirits=90;
		}
		else{
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.6);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=5;
		player.specialcd=15;
		if(player.energy>=0.006){
			player.shootcd=30;
			player.specialcd=0;
			player.energy-=0.006;
			if(!(playertemp.deathlaser)){
				playertemp.deathlaser=0;
			}
			if(playertemp.deathlaser==0){
				sfx.deathlaser.rate(random(0.95,1.05));
				sfx.deathlaser.volume(options.sfx*1.8);
				sfx.deathlaser.play();
			}
			playertemp.deathlasermaint=4;
			playertemp.deathlaser=min(220,playertemp.deathlaser+1);
			append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-55,-25),xvelo:random(-2,2),yvelo:random(-2,2),
			size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(20,30),random(20,30)]});
			if(playertemp.deathlaser>=40){
				sfx.distortion.rate(1);
				sfx.distortion.volume(options.sfx*0.12);
				sfx.distortion.play();
				if(tick%5==0){
					for(b=0;b<enemies.length;b+=1){
						if(enemies[b].x-player.x<55+enemies[b].size&enemies[b].x-player.x>-55-enemies[b].size&enemies[b].y<player.y){
							dohit(20*(1+(playertemp.deathlaser-40)/90),b);
						}
					}
				}
				playertemp.autoshield=1;
				if(render){
					fill(255,0,0,150+abs(tick%6-3)*40);
					rect(player.x-50,0,100,player.y-30);
					ellipseMode(CENTER);
					fill(255,60,60,(player.shield/player.mshield)*(200+abs(tick%12-6)*5));
					ellipse(player.x,player.y,120*player.sizemod,120*player.sizemod);
				}
				for(cp=0;cp<1+options.graphics*3;cp+=1){
					append(particles,{x:player.x+random(-player.size,player.size),y:random(player.y),xvelo:random(-10,10),yvelo:random(-30,-7),
					size:random(7,10),op:random(200,255),opc:-12,exp:1,color:[random(200,255),random(20,30),random(20,30)]});
				}
				if(tick%6==0){
					append(objects,{
						dur:playertemp.deathlaser/20,
						x:player.x,
						y:player.y-50,
						draw:function(){
							fill(255,0,0,objects[a].dur*18);
							rect(objects[a].x-60,objects[a].y-15,120,30,8);
						},
						run:function(){
							objects[a].dur-=1;
							objects[a].y-=40;
							if(objects[a].dur<=0||objects[a].y<-30){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
				}
			}
		}
		else{
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.6);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=5;
		player.specialcd=15;
		if(player.energy>=0.5){
			player.shootcd=5;
			player.specialcd=45;
			player.energy-=0.5;
			temp=0.1;
			for(a=0;a<enemies.length;a+=1){
				if(enemies[a].papershards){
					temp=min(1,temp+0.1);
				}
			}
			if(temp<=0.1){
				player.energy+=0.5;
				player.specialcd=5;
			}
			else{
				append(objects,{
					dur:15,
					draw:function(){
						noFill();
						stroke(200,200,200,objects[a].dur*2);
						ellipseMode(CENTER);
						for(b=0;b<7;b+=1){
							strokeWeight(35-b*4);
							ellipse(player.x,player.y,20+b*4,20+b*4);
						}
						noStroke();
					},
					run:function(){
						objects[a].dur-=1;
						if(objects[a].dur<=0){
							objects.splice(a,1);
							a-=1;
						}
					}
				});
				playertemp.paperguard=15;
				sfx.splat.rate(random(0.9,1.1));
				sfx.splat.volume(options.sfx*temp);
				sfx.splat.play();
				for(a=0;a<enemies.length;a+=1){
					if(enemies[a].papershards){
						dohit(enemies[a].papershards.length*35,a);
						if(enemies[a].hp<=0){
							player.ammo=min(100,player.ammo+enemies[a].papershards.length*2.25);
						}
						for(b=0;b<enemies[a].papershards.length*3;b+=1){
							/*if(random(1)<0.5){
								temp=PI/2;
							}
							else{
								temp=3*PI/2;
							}*/
							append(projectiles,{
								target:1,
								timer:0,
								hits:[enemies[a].id],
								draw:function(){
									ellipseMode(CENTER);
									fill(255,255,255);
									translate(projectiles[a].x,projectiles[a].y);
									rotate(projectiles[a].timer/4);
									rect(-13,-5,7,7,2);
									rect(-5,-13,7,7,2);
									rect(-5,-5,7,7,2);
									rect(-13,-13,7,7,2);
									rect(-5,-20,7,7,2);
									rect(-5,10,7,7,2);
									resetMatrix();
									if(options.graphics){
										fill(255,255,255,20);
										for(b=0;b<5;b+=1){
											ellipse(projectiles[a].x,projectiles[a].y,8+b*4,8+b*4);
										}
									}
								},
								run:function(){
									if(projectiles[a].timer==0){
										if(random(1)<0.3){
											projectiles[a].dir=random(2*PI);
										}
										else{
											projectiles[a].dir=dirgeneric(projectiles[a].x,projectiles[a].y,player.x,player.y)+random(PI-0.2,PI+0.2);
										}
									}
									projectiles[a].timer+=1;
									if(options.graphics){
										append(particles,{x:projectiles[a].x,y:projectiles[a].y,xvelo:random(-1,1),yvelo:random(-1),
										size:8,op:random(120,180),opc:-6,exp:1,color:[random(40,100),random(40,100),random(40,100)]});
									}
								},
								onhit:function(b){
									if(!(enemies[b].papershards)){
										enemies[b].papershards=new Array();
									}
									if(enemies[b].papershards.length<50){
										append(enemies[b].papershards,{x:random(-enemies[b].size,enemies[b].size),y:random(-enemies[b].size,enemies[b].size),rot:random(2*PI)});
										projectiles[a].damage=10*(1+min(1.5,enemies[b].papershards.length/5));
									}
								},
								x:enemies[a].x,
								y:enemies[a].y,
								end:1,
								pierce:0,
								//dir:temp+random(-0.2,0.2),
								dir:0,
								speed:25,
								scans:2,
								size:20,
								damage:10
							});
						}
						enemies[a].papershards=new Array();
					}
				}
			}
		}
		else{
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.6);
			sfx.click.play();
		}
	},
	function(){
		player.shootcd=5;
		player.specialcd=15;
		if(player.energy>=0.1||(playertemp.bladestorm>0&player.energy>=0.9/151)){
			player.shootcd=5;
			player.specialcd=0;
			playertemp.phasing=4;
			append(objects,{
				dur:2,
				run:function(){
					playertemp.slow=max(playertemp.slow,0.7);
					objects[a].dur-=1;
					if(objects[a].dur<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
			append(objects,{
				dur:5,
				dir:random(2*PI),
				x:player.x,
				y:player.y,
				draw:function(){
					fill(110+abs(tick%10-5)*20,110,110,170);
					translate(objects[a].x,objects[a].y);
					rotate(objects[a].dir);
					rect(-40,-10,80,20);
					triangle(40,-10,40,10,55,0);
					resetMatrix();
				},
				run:function(){
					objects[a].dur-=1;
					objects[a].x+=cos(objects[a].dir)*40;
					objects[a].y+=sin(objects[a].dir)*40;
					if(objects[a].dur<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
			noFill();
			strokeWeight(15);
			if(playertemp.bladestorma>130){
				stroke(255,255,255);
			}
			else{
				stroke(255,50,50);
			}
			ellipseMode(CENTER);
			ellipse(player.x,player.y,440,440);
			noStroke();
			if(playertemp.bladestorma%6==0){
				for(b=0;b<enemies.length;b+=1){
					if(hitbox(player.x,player.y,enemies[b].x,enemies[b].y,220+enemies[b].size)){
						if(pow(enemies[b].x-player.x,2)+pow(enemies[b].y-player.y,2)<pow(220+enemies[b].size,2)){
							dohit(20,b);
						}
					}
				}
			}
			if(playertemp.bladestorm>0){
				player.energy-=0.9/151;
				playertemp.bladestorma+=1;
				if(playertemp.bladestorma>=150){
					playertemp.bladestorm=0;
					player.specialcd=30;
				}
			}
			else{
				player.energy-=0.1;
				playertemp.bladestorma=0;
				sfx.bladestorm.rate(random(0.9,1.1));
				sfx.bladestorm.volume(options.sfx*0.8);
				sfx.bladestorm.play();
			}
			playertemp.bladestorm=5;
		}
		else{
			sfx.click.rate(random(0.9,1.1));
			sfx.click.volume(options.sfx*0.6);
			sfx.click.play();
		}
	},
];
var shielddraw=[
	function(){
		ellipseMode(CENTER);
		fill(100,100,215+abs(tick%40-20)*2,110+abs(tick%60-30));
		ellipse(player.x,player.y,player.sizemod*(86+(abs(tick%12-6)-3)*min(20,player.shieldboing)/3),player.sizemod*(100+(abs((tick+6)%12-6)-3)*min(20,player.shieldboing)/3));
	},
	function(){
		ellipseMode(CENTER);
		fill(150,170,215+abs(tick%40-20)*2,110+abs(tick%60-30));
		ellipse(player.x,player.y,player.sizemod*(95+(abs(tick%12-6)-3)*min(20,player.shieldboing)/3),player.sizemod*(95+(abs((tick+6)%12-6)-3)*min(20,player.shieldboing)/3));
	},
	function(){
		ellipseMode(CENTER);
		fill(40,170+abs(tick%40-20)*2,150,70+abs(tick%60-30));
		ellipse(player.x,player.y,player.sizemod*(70+(abs(tick%12-6)-3)*min(20,player.shieldboing)/3),player.sizemod*(115+(abs((tick+6)%12-6)-3)*min(20,player.shieldboing)/2.5));
	},
	function(){
		ellipseMode(CENTER);
		fill(200+abs(tick%40-20)*2,50,80,120+abs(tick%60-30));
		ellipse(player.x,player.y,player.sizemod*(130+(abs(tick%12-6)-3)*min(20,player.shieldboing)/2),player.sizemod*(130+(abs((tick+6)%12-6)-3)*min(20,player.shieldboing)/2));
	},
	function(){
		fill(200+abs(tick%40-20)*3,200+abs(tick%40-20)*3,200+abs(tick%40-20)*3,190);
		translate(player.x,player.y);
		rotate(tick/60);
		rect(-15*player.sizemod,-15*player.sizemod,30*player.sizemod,30*player.sizemod);
		resetMatrix();
	},
	function(){
		fill(200+abs(tick%40-20)*2,200+abs(tick%40-20)*2,200+abs(tick%40-20)*2,190);
		translate(player.x,player.y);
		rotate(tick/30+(player.shieldboing%4));
		rect(-40*player.sizemod,-15*player.sizemod,80*player.sizemod,30*player.sizemod);
		triangle(-40*player.sizemod,-15*player.sizemod,-40*player.sizemod,15*player.sizemod,-60*player.sizemod,0);
		triangle(40*player.sizemod,-15*player.sizemod,40*player.sizemod,15*player.sizemod,60*player.sizemod,0);
		rotate(PI/2);
		rect(-40*player.sizemod,-15*player.sizemod,80*player.sizemod,30*player.sizemod);
		triangle(-40*player.sizemod,-15*player.sizemod,-40*player.sizemod,15*player.sizemod,-60*player.sizemod,0);
		triangle(40*player.sizemod,-15*player.sizemod,40*player.sizemod,15*player.sizemod,60*player.sizemod,0);
		resetMatrix();
	},
];
var playerdraw=[
	function(){
		shape(sprites.astrohawk,player.x,player.y,450*player.sizemod,600*player.sizemod);
	},
	function(){
		shape(sprites.crystalvanguard,player.x,player.y,450*player.sizemod,600*player.sizemod);
	},
	function(){
		if(playertemp.phasing>0){
			ellipseMode(CENTER);
			fill(110,110+abs(tick%40-20)*2,115,20+abs(tick%16-8)*20);
			ellipse(player.x,player.y,40*player.sizemod,90*player.sizemod);
		}
		else{
			shape(sprites.fairgravesvessel,player.x,player.y,450*player.sizemod,600*player.sizemod);
		}
	},
	function(){
		shape(sprites.cybersphere,player.x,player.y,450*player.sizemod,600*player.sizemod);
	},
	function(){
		shape(sprites.paperplane,player.x,player.y,450*player.sizemod,600*player.sizemod);
		fill(255,255,255,170+abs(tick%40-20)*3);
		for(a=0;a<enemies.length;a+=1){
			if(enemies[a].papershards){
				for(b=0;b<enemies[a].papershards.length;b+=1){
					translate(enemies[a].x+enemies[a].papershards[b].x,enemies[a].y+enemies[a].papershards[b].y);
					rotate(enemies[a].papershards[b].rot);
					rect(-5,-5,10,10,2);
					resetMatrix();
				}
			}
		}
	},
	function(){
		if(playertemp.phasing>0){
			ellipseMode(CENTER);
			noFill();
			strokeWeight(12);
			stroke(110,110,115+abs(tick%40-20)*2,130+abs(tick%16-8)*10);
			ellipse(player.x,player.y,60*player.sizemod,60*player.sizemod);
			noStroke();
		}
		else{
			if(player.specialcd>0){
				fill(0,0,0,100+abs(tick%30-15)*7);
				ellipseMode(CENTER);
				ellipse(player.x,player.y,120*player.sizemod,120*player.sizemod);
			}
			shape(sprites.blademaster,player.x,player.y,450*player.sizemod,600*player.sizemod);
			if(playertemp.empoweredblade>0){
				fill(255,100,100,100+abs(tick%60-30)*2);
				rect(player.x-31*player.sizemod,player.y-21*player.sizemod,10*player.sizemod,34*player.sizemod,4*player.sizemod);
				if(playertemp.empoweredblade>1){
					fill(100,100,255,100+abs((tick+30)%60-30)*2);
					rect(player.x+21*player.sizemod,player.y-21*player.sizemod,10*player.sizemod,34*player.sizemod,4*player.sizemod);
				}
			}
		}
	},
];
var applyshipstats=[
	function(){
		player.shipId=0;
		player.shipName="Astro Hawk";
		player.hp=100;
		player.mhp=100;
		player.shield=40;
		player.mshield=40;
		player.energy=10;
		player.menergy=10;
		player.shieldregen=7;
		player.shielddecay=10;
		player.speed=7;
		player.ammor=18;
		player.size=20;
		player.parrytimer=8;
		player.shipfuncs={
			passive:function(){
				if(playertemp.hawkblitz>0){
					playertemp.hawkblitz-=1;
				}
			}
		};
	},
	function(){
		player.shipId=1;
		player.shipName="Crystal Vanguard";
		player.hp=40;
		player.mhp=40;
		player.shield=33;
		player.mshield=33;
		player.energy=8;
		player.menergy=8;
		player.shieldregen=5.5;
		player.shielddecay=8;
		player.speed=6.2;
		player.ammor=20;
		player.size=20;
		player.parrytimer=8;
		player.shipfuncs={
			passive:function(){
				if(playertemp.crystalstorm>0){
					if(playertemp.crystalstorm<10){
						fill(160+abs(tick%30-15)*5,40,60,255-playertemp.crystalstorm*25);
						triangle(player.x-40,player.y,player.x+40,player.y,player.x,player.y-55);
						triangle(player.x-40,player.y,player.x+40,player.y,player.x,player.y+55);
					}
					playertemp.crystalstorm-=0.1;
					append(objects,{
						x1:player.x+random(-90,90),
						y1:player.y+random(-90,90),
						x2:player.x+random(-90,90),
						y2:player.y+random(-90,90),
						x3:player.x+random(-90,90),
						y3:player.y+random(-90,90),
						dur:6,
						draw:function(){
							fill(160+abs(tick%30-15)*5,210,255,objects[a].dur*15);
							triangle(objects[a].x1-6,objects[a].y1,objects[a].x1+6,objects[a].y1,objects[a].x1,objects[a].y1-10);
							triangle(objects[a].x1-6,objects[a].y1,objects[a].x1+6,objects[a].y1,objects[a].x1,objects[a].y1+10);
							triangle(objects[a].x2-6,objects[a].y2,objects[a].x2+6,objects[a].y2,objects[a].x2,objects[a].y2-10);
							triangle(objects[a].x2-6,objects[a].y2,objects[a].x2+6,objects[a].y2,objects[a].x2,objects[a].y2+10);
							triangle(objects[a].x3-6,objects[a].y3,objects[a].x3+6,objects[a].y3,objects[a].x3,objects[a].y2-10);
							triangle(objects[a].x3-6,objects[a].y3,objects[a].x3+6,objects[a].y3,objects[a].x3,objects[a].y2+10);
						},
						run:function(){
							objects[a].dur-=1;
							if(objects[a].dur<=0){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
					if(tick%6==0){
						for(b=0;b<enemies.length;b+=1){
							if(playerhitbox(enemies[b].x,enemies[b].y,enemies[b].size+95)){
								dohit(12,b);
							}
						}
					}
				}
				strokeWeight(12);
				noFill();
				stroke(110+abs(tick%110-55),120+abs(tick%120-60),140+abs(tick%146-73),180+abs(tick%100-50));
				arc(player.x,player.y,70*player.sizemod,70*player.sizemod,0,(playertemp.crystalstorm/60)*2*PI);
				noStroke();
			},
			dmgtakenps:function(){
				if(playertemp.crystalstorm>0){
					if(playertemp.crystalstorm>dmg.dmg){
						if(dmg.dmg>1){
							sfx.glacialhit.rate(random(0.9,1.1));
							sfx.glacialhit.volume(options.sfx*min(10,dmg.dmg)*0.02);
							sfx.glacialhit.play();
						}
						playertemp.crystalstorm-=dmg.dmg;
						dmg.dmg=0;
					}
					else{
						dmg.dmg-=playertemp.crystalstorm;
						playertemp.crystalstorm=0;
					}
				}
			}
		};
	},
	function(){
		player.shipId=2;
		player.shipName="Fairgrave's Vessel";
		player.hp=80;
		player.mhp=80;
		player.shield=20;
		player.mshield=20;
		player.energy=7;
		player.menergy=7;
		player.shieldregen=3.5;
		player.shielddecay=5;
		player.speed=8.2;
		player.ammor=16;
		player.size=22;
		player.parrytimer=8;
		playertemp.waterproof=true;
		playertemp.phasing=0;
		player.shipfuncs={
			overlay:function(){
				if(player.hp<0){
					fill(40,110,50,200);
					rect(905,600,10,max(-500,(player.hp/player.mhp)*500));
				}
				if(player.hp<-player.mhp){
					fill(40,200,50);
					rect(905,600,10,max(-500,((player.hp+player.mhp)/player.mhp)*250));
				}
			},
			passive:function(){
				if(player.hp<player.wither){
					player.energy+=((player.hp-player.wither)/player.mhp)/400;
				}
				if(player.energy>0){
					playertemp.cannotdie=1;
				}
				else{
					playertemp.cannotdie=0;
				}
				if(playertemp.phasing>0){
					playertemp.phasing-=1;
				}
				if(playertemp.ragingspirits>0){
					playertemp.ragingspirits-=1;
					if(playertemp.ragingspirits%6==0){
					append(objects,{
						x:player.x+random(-15,15),
						y:player.y+random(-30,-15),
						dur:300,
						dir:0,
						target:{
							found:0,
							index:0
						},
						draw:function(){
							fill(100,130,110);
							ellipse(objects[a].x,objects[a].y,20,20);
							if(options.graphics){
								fill(70,200,50,10);
								for(b=0;b<6;b+=1){
									ellipse(objects[a].x,objects[a].y,15+b*2,15+b*2);
								}
								if(tick%2==0){
									append(particles,{x:objects[a].x+random(-20,20),y:objects[a].y+random(-20,20),xvelo:random(-5,5),yvelo:random(-5,5),
									size:random(7,10),op:random(180,220),opc:-12,exp:1,color:[random(40,60),random(100,120),random(70,90)]});
								}
							}
						},
						run:function(){
							if(objects[a].target.found){
								if(enemies[objects[a].target.index]){
									objects[a].dir=dirgeneric(objects[a].x,objects[a].y,enemies[objects[a].target.index].x,enemies[objects[a].target.index].y);
									objects[a].x+=sin(objects[a].dir)*9;
									objects[a].y-=cos(objects[a].dir)*9;
									for(b=0;b<enemies.length;b+=1){
										if(hitbox(objects[a].x,objects[a].y,enemies[b].x,enemies[b].y,enemies[b].size+20)){
											objects[a].dur=0;
											dohit(25,b);
											append(particles,{x:objects[a].x,y:objects[a].y,size:15,sizec:2,op:255,opc:-12,exp:1,color:[random(40,60),random(100,120),random(70,90)]});
										}
									}
								}
								else{
									objects[a].target={
										found:0,
										index:0
									};
								}
							}
							else{
								if(enemies.length>0){
									objects[a].target.index=round(random(-0.49,enemies.length-0.51));
									objects[a].target.found=1;
								}
							}
							objects[a].dur-=1;
							if(objects[a].dur<=0){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
					}
				}
				if(tick%2==0){
					append(objects,{
						x:player.x,
						y:player.y,
						dur:15,
						draw:function(){
							fill(0,150,75,objects[a].dur*4);
							ellipseMode(CENTER);
							ellipse(objects[a].x,objects[a].y,45*player.sizemod,90*player.sizemod);
						},
						run:function(){
							objects[a].dur-=1;
							if(objects[a].dur<=0){
								objects.splice(a,1);
								a-=1;
							}
						}
					});
				}
			},
			onkill:function(a){
				heal((enemies[a].mhp/50)*(2-player.hp/player.mhp));
				for(cp=0;cp<min(100,(enemies[a].mhp/30)*(1.5-player.hp/player.mhp)*2);cp+=1){
					append(particles,{x:random(915,965),y:random(590,610),xvelo:random(-2,2),yvelo:random(-6,-3),
					size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
				}
			},
			dmgtakenps:function(){
				if(dmg.blocked){
					playertemp.phasing=60;
				}
			}
		};
	},
	function(){
		player.shipId=3;
		player.shipName="Cyber Sphere";
		player.hp=200;
		player.mhp=200;
		player.shield=60;
		player.mshield=60;
		player.energy=12;
		player.menergy=12;
		player.shieldregen=10.5;
		player.shielddecay=12.5;
		player.speed=2.7;
		player.ammor=18;
		player.size=32;
		player.parrytimer=9;
		player.shipfuncs={
			passive:function(){
				if(playertemp.deathlaser>0){
					if(playertemp.deathlasermaint>0){
						playertemp.deathlasermaint-=1;
					}
					else{
						playertemp.deathlaser=max(0,playertemp.deathlaser*0.9-1);
					}
					if(playertemp.deathlaser>40){
						playertemp.speed=max(playertemp.speed,(playertemp.deathlaser-40)/180);
						player.shield-=(min(160,playertemp.deathlaser)-40)/400;
					}
					if(playertemp.deathlaser<=0){
						playertemp.autoshield=0;
						sfx.deathlaser.stop();
					}
				}
			}
		};
	},
	function(){
		player.shipId=4;
		player.shipName="Paper Plane";
		player.hp=20;
		player.mhp=20;
		player.shield=11;
		player.mshield=11;
		player.energy=10;
		player.menergy=10;
		player.shieldregen=3;
		player.shielddecay=3.1;
		player.speed=10;
		player.ammor=12;
		player.size=1;
		player.parrytimer=8;
		player.shipfuncs={
			onkill:function(a){
				if(enemies[a].papershards){
					player.ammo=min(100,player.ammo+enemies[a].papershards.length*2.25);
				}
			},
			passive:function(){
				if(playertemp.paperguard>0){
					playertemp.paperguard-=1;
				}
			},
			dmgtaken:function(){
				if(playertemp.paperguard>0){
					dmg.dmg=0;
				}
			}
		};
	},
	function(){
		player.shipId=5;
		player.shipName="Blademaster";
		player.hp=85;
		player.mhp=85;
		player.shield=37;
		player.mshield=37;
		player.energy=8;
		player.menergy=8;
		player.shieldregen=8;
		player.shielddecay=11;
		player.speed=8;
		player.ammor=18;
		player.size=18;
		player.parrytimer=9;
		playertemp.phasing=0;
		player.shipfuncs={
			passive:function(){
				if(playertemp.phasing>0){
					playertemp.phasing-=1;
				}
				if(!(input.shoot)){
					playertemp.empoweredbladecd=0;
				}
				if(!(playertemp.bladestorm)){
					playertemp.bladestorm=0;
				}
				if(playertemp.bladestorm>0){
					playertemp.bladestorm-=1;
					if(playertemp.bladestorm<=0){
						sfx.bladestorm.stop();
						player.specialcd=30;
					}
				}
			},
			onparry:function(){
				if(!(playertemp.empoweredblade)){
					playertemp.empoweredblade=0;
				}
				playertemp.empoweredblade=min(2,playertemp.empoweredblade+1);
			}
		};
	},
];
var applymods=function(){
	player.modfuncs={
		passive:new Array(),
		damagetaken:new Array(),
		damagetakenps:new Array(),
		damagedealt:new Array(),
		fundamentals:new Array(),
		overlay:new Array(),
		overlayus:new Array(),
		onkill:new Array(),
		onheal:new Array(),
	};
	recalinstability();
	append(player.modfuncs.passive,function(){
		if(ingame){
			if(player.instability>100){
				player.hp-=(player.instability-100)/2400;
			}
		}
	});
	if(player.tinker.damage>0){
		append(player.modfuncs.damagedealt,function(edmg,target){
			dmg*=1+player.tinker.damage/200;
		});
	}
	else if(player.tinker.damage<0){
		append(player.modfuncs.damagedealt,function(edmg,target){
			dmg/=1-player.tinker.damage/150;
		});
	}
	if(player.tinker.health>0){
		player.mhp*=1+player.tinker.health/100;
		player.hp*=1+player.tinker.health/100;
	}
	else if(player.tinker.health<0){
		player.mhp/=1-player.tinker.health/50;
		player.hp/=1-player.tinker.health/50;
	}
	if(player.tinker.shield>0){
		player.mshield*=1+player.tinker.shield/130;
		player.shield*=1+player.tinker.shield/130;
		player.shieldregen*=1+player.tinker.shield/160;
		player.shielddecay*=1+player.tinker.shield/220;
	}
	else if(player.tinker.health<0){
		player.mshield/=1-player.tinker.shield/65;
		player.shield/=1-player.tinker.shield/65;
		player.shieldregen/=1-player.tinker.shield/80;
		player.shielddecay/=1-player.tinker.shield/110;
	}
	if(player.tinker.energy>0){
		player.menergy*=1+player.tinker.energy/100;
		player.energy*=1+player.tinker.energy/100;
	}
	else if(player.tinker.energy<0){
		player.menergy/=1-player.tinker.energy/50;
		player.energy/=1-player.tinker.energy/50;
	}
	if(player.tinker.speed>0){
		player.speed*=1+player.tinker.speed/100;
	}
	else if(player.tinker.speed<0){
		player.speed/=1-player.tinker.speed/50;
	}
	if(player.tinker.compaction>0){
		player.size/=1+player.tinker.compaction/50;
		player.sizemod/=1+player.tinker.compaction/50;
	}
	else if(player.tinker.compaction<0){
		player.size*=1-player.tinker.compaction/100;
		player.sizemod*=1-player.tinker.compaction/100;
	}
	if(player.mods[0]){
		player.mhp*=1.5;
		player.hp*=1.5;
		player.speed*=0.85;
		append(player.modfuncs.onheal,function(val){
			healval*=1.2;
		});
	}
	if(player.mods[1]){
		append(player.modfuncs.passive,function(){
			player.energy=min(player.menergy,player.energy+0.0012+player.menergy*0.000055);
		});
		player.mshield*=0.7;
		player.shield*=0.7;
		append(player.modfuncs.damagetakenps,function(){
			if(random(1)<0.4){
				dmg.dmg*=2;
				for(cp=0;cp<dmg.dmg*2.5;cp+=1){
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-2,2),yvelo:random(-2,2),
					size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(160,190),random(70,120)]});
				}
			}
		});
	}
	if(player.mods[24]){
		append(player.modfuncs.passive,function(){
			if(!(playertemp.malleablehull)){
				playertemp.malleablehull=0;
			}
			if(playertemp.malleablehull>0){
				playertemp.malleablehull-=1;
			}
		});
		append(player.modfuncs.damagetaken,function(){
			if(playertemp.malleablehull>0){
				dmg.dmg*=1.5;
				for(cp=0;cp<dmg.dmg*5;cp+=1){
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(100,130),random(20)]});
				}
			}
			else{
				playertemp.malleablehull=180;
			}
		});
	}
	if(player.mods[26]){
		playertemp.chromeplating=7+player.mhp*0.03;
		append(player.modfuncs.overlayus,function(){
			fill(100+abs(tick%180-90)*155/90,100+abs(tick%154-77)*155/77,100+abs(tick%138-79)*155/79,200);
			triangle(915,100,965,100,940,100+playertemp.chromeplating*500/(max(20,player.mhp)));
		});
		append(player.modfuncs.passive,function(){
			if(!(playertemp.chromeplating)){
				playertemp.chromeplating=0;
			}
			playertemp.chromeplating=min(7+player.mhp*0.03,playertemp.chromeplating+(7+player.mhp*0.03)/420);
		});
		append(player.modfuncs.damagetakenps,function(){
			if(dmg.dmg>0){
				for(cp=0;cp<min(playertemp.chromeplating,dmg.dmg)*8;cp+=1){
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-2,2),yvelo:random(-2,2),
					size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(100,255),random(100,255),random(100,255)]});
				}
				if(playertemp.chromeplating>dmg.dmg){
					playertemp.chromeplating-=dmg.dmg;
					dmg.dmg=0;
					sfx.hull.rate(random(0.9,1.1));
					sfx.hull.volume(options.sfx*2);
					sfx.hull.play();
				}
				else{
					dmg.dmg-=playertemp.chromeplating;
					playertemp.chromeplating=0;
				}
			}
		});
	}
	if(player.mods[2]){
		player.parrytimer+=2;
		player.shieldregen*=1.5;
		player.shielddecay*=1.25;
		player.menergy*=0.75;
		player.energy*=0.75;
	}
	if(player.mods[3]){
		append(player.modfuncs.passive,function(){
			if(player.shield<player.mshield*0.5){
				if(player.energy>=0.002){
					player.energy-=0.002;
					player.shield+=0.06+player.mshield*0.0015;
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-2,2),yvelo:random(-2,2),
					size:random(7,10),op:random(120,180),opc:-10,exp:1,color:[random(60,100),random(150,200),random(200,255)]});
				}
				if(!(player.shielding)){
					if(player.energy>=0.001){
						player.energy-=0.001;
						player.shield+=0.06+player.mshield*0.0015;
						append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-2,2),yvelo:random(-2,2),
						size:random(7,10),op:random(120,180),opc:-10,exp:1,color:[random(60,100),random(150,200),random(200,255)]});
					}
				}
			}
		});
	}
	if(player.mods[4]){
		append(player.modfuncs.damagetaken,function(){
			playertemp.mobileshield=dmg.dmg/20;
			dmg.dmg*=0.95;
		});
		append(player.modfuncs.damagetakenps,function(){
			dmg.dmg+=playertemp.mobileshield;
		});
	}
	if(player.mods[5]){
		append(player.modfuncs.overlay,function(){
			if(playertemp.reactiveshieldtimer>0||!(playertemp.reactiveshieldcd>0)){
				if(!(playertemp.reactiveshieldcd>0)){
					fill(130,140,255,50+abs(tick%90-45)*2);
				}
				else{
					fill(255,140,200,100+abs(tick%90-45)*2);
				}
				for(a=0;a<7;a+=1){
					if((player.shield/player.mshield)*7>=7-a){
						rect(985,100+a*70+((tick%20)/20)*70,-abs((tick+a*2)%20-10)*5,20);
					}
				}
			}
		});
		append(player.modfuncs.passive,function(){
			player.energy=max(0,player.energy-0.0003);
			if(playertemp.reactiveshieldcd>0){
				playertemp.reactiveshieldcd-=1;
			}
			if(playertemp.reactiveshieldtimer>0){
				playertemp.reactiveshieldtimer-=1;
			}
		});
	}
	if(player.mods[6]){
		append(player.modfuncs.passive,function(){
			if(!(playertemp.nanogae)){
				playertemp.nanogae=gametick;
			}
			if(playertemp.timesincedamagetaken>180&playertemp.nanogae<gametick){
				if(player.hp<player.mhp&player.energy>0.0015*(min(360,playertemp.timesincedamagetaken)/180)){
					playertemp.nanogae=gametick;
					player.energy-=0.0015*(min(360,playertemp.timesincedamagetaken)/180);
					regen((0.0003+player.mhp*0.00015)*0.75*(min(360,playertemp.timesincedamagetaken)/180));
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-2,2),yvelo:random(-2,2),
					size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(60,100),random(150,190),random(90,130)]});
				}
			}
		});
	}
	if(player.mods[7]){
		append(player.modfuncs.passive,function(){
			player.energy=max(0,player.energy-0.002);
		});
		append(player.modfuncs.damagetaken,function(){
			playertemp.energycapacitor=dmg.dmg;
		});
		append(player.modfuncs.damagetakenps,function(){
			player.energy=min(player.menergy,player.energy+(playertemp.energycapacitor-dmg.dmg)/25);
		});
	}
	if(player.mods[10]){
		append(player.modfuncs.passive,function(){
			player.energy=max(0,player.energy-0.0006);
		});
		append(player.modfuncs.damagedealt,function(edmg,target){
			player.energy=min(player.menergy,player.energy+edmg/1000);
			if(dtags){
				if(dtags.basicAttack){
					player.energy=min(player.menergy,player.energy+edmg/1000);
				}
			}
		});
		append(player.modfuncs.damagetaken,function(){
			player.energy=max(0,player.energy-(player.energy/player.menergy)*dmg.dmg/(20+player.mhp*0.25+player.mshield*0.5));
		});
		append(player.modfuncs.damagetakenps,function(){
			player.energy=max(0,player.energy-(player.energy/player.menergy)*dmg.dmg*2/(20+player.mhp*0.25+player.mshield*0.5));
		});
	}
	if(player.mods[11]){
		append(player.modfuncs.damagedealt,function(edmg,target){
			dmg*=1.5;
			if(!(playertemp.heavyimpact)){
				playertemp.heavyimpact=0;
			}
			playertemp.heavyimpact+=edmg;
			while(playertemp.heavyimpact>5){
				playertemp.heavyimpact-=5;
				append(projectiles,{
					target:0,
					draw:function(){
						ellipseMode(CENTER);
						fill(100,80,60);
						ellipse(projectiles[a].x,projectiles[a].y,14,14);
						if(options.graphics){
							if(projectiles[a].target){
								fill(0,0,255,10);
							}
							else{
								fill(255,0,0,10);
							}
							for(b=0;b<7;b+=1){
								ellipse(projectiles[a].x,projectiles[a].y,b*10,b*10);
							}
						}
					},
					x:enemies[target].x,
					y:enemies[target].y,
					end:0,
					dur:120,
					pierce:0,
					dir:random(2*PI),
					speed:3,
					size:10,
					damage:6
				});
			}
		});
	}
	if(player.mods[12]){
		player.menergy*=1.2;
		player.energy*=1.2;
	}
	if(player.mods[13]){
		append(player.modfuncs.fundamentals,function(){
			if(!(playertemp.juketick)){
				playertemp.juketick=0;
			}
			playertemp.juketick+=1;
			bgm.rate(0.02+(abs(playertemp.juketick%720-360)/180+abs(playertemp.juketick%5000-2500)/3000)/(0.4+abs(playertemp.juketick%1234-617)/500));
			if(menumode==2||!(biome.id==0)){
				if(bgmt){
					bgmt.rate(0.02+(abs(playertemp.juketick%720-360)/180+abs(playertemp.juketick%5000-2500)/3000)/(0.4+abs(playertemp.juketick%1234-617)/500));
				}
			}
		});
	}
	if(player.mods[15]){
		append(player.modfuncs.passive,function(){
			if(player.wither>0){
				if(gametick%30==0){
					takedamage({dmg:min(1,player.wither)*0.75,shieldpen:true});
					player.wither=max(0,player.wither-1);
				}
			}
		});
	}
	if(player.mods[16]){
		player.mshield*=1.8;
		player.shield*=1.8;
		player.parrytimer-=2;
		append(player.modfuncs.passive,function(){
			if(player.shielding){
				append(objects,{
					dur:2,
					tdur:32,
					refresh:0,
					run:function(){
						playertemp.slow=max(playertemp.slow,objects[a].tdur/35);
						if(!(objects[a].refresh||player.shielding)){
							objects[a].refresh=1;
							objects[a].dur=30;
						}
						objects[a].dur-=1;
						objects[a].tdur-=1;
						if(objects[a].dur<=0){
							objects.splice(a,1);
							a-=1;
						}
					}
				});
			}
		});
	}
	if(player.mods[17]){
		player.speed*=1.2;
		append(player.modfuncs.damagetakenps,function(){
			if(dmg.dmg>0){
				append(objects,{
					dur:90,
					run:function(){
						playertemp.slow=max(playertemp.slow,objects[a].dur/100);
						objects[a].dur-=1;
						if(objects[a].dur<=0){
							objects.splice(a,1);
							a-=1;
						}
					}
				});
			}
		});
	}
	if(player.mods[18]){
		append(player.modfuncs.passive,function(){
			if(tick%4==0&options.graphics){
				append(particles,{x:player.x,y:player.y,xvelo:random(-3,3),yvelo:random(-3,3),
				size:random(8,11),op:random(50,120),opc:-3,exp:1,color:[random(70,120),0,random(70,120)]});
			}
			if(!(playertemp.souleater)){
				playertemp.souleater=0;
			}
			else{
				playertemp.souleater*=0.9997;
				if(tick%round((200/playertemp.souleater))==0&options.graphics){
					append(particles,{x:random(20,80),y:random(670,695),xvelo:random(1,5),yvelo:random(-5,-1),
					size:random(8,11),op:random(50,120),opc:-3,exp:1,color:[random(70,120),0,random(70,120)]});
				}
			}
		});
		append(player.modfuncs.overlay,function(){
			fill(50,0,50,150);
			ellipse(50,680,90,35);
			if(playertemp.souleater){
				fill(255,255,255);
				textFont(0,20);
				text(round(playertemp.souleater),30,684);
			}
		});
		append(player.modfuncs.onkill,function(c){
			append(objects,{
				x:enemies[c].x,
				y:max(0,enemies[c].y),
				souls:min(75,enemies[c].mhp/20),
				timer:600,
				draw:function(){
					fill(100+abs(tick%120-60)*2,0,100+abs(tick%120-60)*2,(objects[a].timer/600)*(objects[a].souls+25+abs(tick%50-25)*8));
					ellipseMode(CENTER);
					ellipse(objects[a].x,objects[a].y,(1.5+objects[a].souls/25)*(20+abs(tick%50-25)/5),(1.5+objects[a].souls/25)*(20+abs((tick+25)%50-25)/5));
				},
				run:function(){
					if(playerhitbox(objects[a].x,objects[a].y,40)){
						objects[a].y=999;
						playertemp.souleater+=objects[a].souls;
						for(cp=0;cp<10;cp+=1){
							append(particles,{x:objects[a].x,y:objects[a].y,xvelo:random(-4,4),yvelo:random(-4,4),
							size:7,op:random(100,240),opc:-6,exp:1,color:[random(70,120),0,random(70,120)]});
						}
					}
					if(tick%3==0){
						append(particles,{x:objects[a].x,y:objects[a].y,xvelo:random(-3,3),yvelo:random(-3,3),
						size:7,op:random(50,120),opc:-3,exp:1,color:[random(70,120),0,random(70,120)]});
					}
					objects[a].y+=0.5;
					objects[a].timer-=1;
					if(objects[a].y>730||objects[a].timer<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
		});
		append(player.modfuncs.damagedealt,function(edmg,target){
			dmg*=0.5;
			if(playertemp.souleater){
				dmg*=1+playertemp.souleater/100;
			}
		});
	}
	if(player.mods[19]){
		append(player.modfuncs.passive,function(){
			if(!(playertemp.parryaddiction)){
				playertemp.parryaddiction=0;
			}
			if(!(playertemp.parryaddictioncd)){
				playertemp.parryaddictioncd=0;
			}
			if(ingame){
				playertemp.parryaddiction=min(1500,playertemp.parryaddiction+1);
				playertemp.parryaddictioncd=max(0,playertemp.parryaddictioncd-1);
			}
			if(playertemp.parryaddiction>600){
				player.wither+=(playertemp.parryaddiction-300)/12000;
			}
		});
	}
	if(player.mods[20]){
		player.menergy=max(1,player.menergy-1);
		append(player.modfuncs.onkill,function(c){
			if(player.ammo>=5+player.ammor/4){
				player.ammo-=5+player.ammor/4;
				sfx.shockwave.rate(random(0.9,1.1));
				sfx.shockwave.volume(options.sfx*1.5);
				sfx.shockwave.play();
				append(objects,{
					x:enemies[c].x,
					y:max(0,enemies[c].y),
					dur:0,
					size:150+enemies[c].size*2,
					dmg:80+enemies[c].mhp/2,
					draw:function(){
						ellipseMode(CENTER);
						if(objects[a].dur<40){
							fill(objects[a].dur*6,0,255-objects[a].dur*6,150);
							ellipse(objects[a].x,objects[a].y,objects[a].size,objects[a].size);
							fill(255,220,0);
							ellipse(objects[a].x,objects[a].y,objects[a].size*(0.05+objects[a].dur/120),objects[a].size*(0.05+objects[a].dur/120));
						}
						else{
							fill(255,220,0,1250-objects[a].dur*25,200);
							ellipse(objects[a].x,objects[a].y,objects[a].size*(objects[a].dur-15)/25,objects[a].size*(objects[a].dur-15)/25);
						}
					},
					run:function(){
						if(objects[a].dur==40){
							for(b=0;b<enemies.length;b+=1){
								if(hitbox(objects[a].x,objects[a].y,enemies[b].x,enemies[b].y,enemies[b].size+objects[a].size/2)){
									if(enemies[b].hp>0){
										dohit(objects[a].dmg,b);
										objects[a].hashit=true;
									}
								}
							}
							if(!(objects[a].hashit)){
								player.ammo=min(100,player.ammo+5+player.ammor/4);
							}
						}
						objects[a].dur+=1;
						if(objects[a].dur>60){
							objects.splice(a,1);
							a-=1;
						}
					}
				});
			}
		});
	}
	if(player.mods[21]){
		append(player.modfuncs.passive,function(){
			if(player.ammo<40){
				if(player.energy>0.003){
					player.energy-=0.003;
					player.ammo+=0.6;
				}
			}
		});
	}
	if(player.mods[22]){
		append(player.modfuncs.passive,function(){
			if(!(playertemp.emp)){
				playertemp.emp=0;
			}
			if(player.shielding){
				if(playertemp.emp<120){
					player.shield-=0.3;
					playertemp.emp=min(120,playertemp.emp+1);
				}
			}
			else if(playertemp.emp>0){
				if(playertemp.emp>30){
					sfx.emp.rate(random(0.9,1.1));
					sfx.emp.volume(10*options.sfx);
					sfx.emp.play();
				}
				append(particles,{x:player.x,y:player.y,size:40+min(90,playertemp.emp)*6,op:150,opc:-12,exp:1,color:[random(200,255),random(200,255),random(150,200)]});
				for(b=0;b<enemies.length;b+=1){
					if(hitbox(player.x,player.y,enemies[b].x,enemies[b].y,enemies[b].size+20+min(90,playertemp.emp)*3)){
						dohit(playertemp.emp,b);
						if(!(enemies[b].stun)){
							enemies[b].stun=0;
						}
						if(enemies[b].isBoss){
							enemies[b].stun=max(enemies[b].stun,playertemp.emp*0.5);
						}
						else{
							enemies[b].stun=max(enemies[b].stun,playertemp.emp*1.5);
						}
					}
				}
				for(b=0;b<projectiles.length;b+=1){
					if(projectiles[b].target==0&!(projectiles[b].reflected)){
						if(pow(projectiles[b].x-player.x,2)+pow(projectiles[b].y-player.y,2)<pow(20+min(90,playertemp.emp)*3+projectiles[b].size,2)){
							projectiles.splice(b,1);
							b-=1;
						}
					}
				}
				playertemp.emp=0;
			}
		});
	}
	if(player.mods[23]){
		player.menergy=max(1,player.menergy-1);
		append(player.modfuncs.onheal,function(val){
			healval*=0.5;
		});
		append(player.modfuncs.damagedealt,function(edmg,target){
			if(!(playertemp.essenceleech)){
				playertemp.essenceleech=0;
			}
			playertemp.essenceleech+=edmg;
			while(playertemp.essenceleech>150){
				playertemp.essenceleech-=150;
				append(objects,{
					x:enemies[target].x,
					y:max(0,enemies[target].y),
					val:600,
					dir:0,
					draw:function(){
						fill(255,abs(tick%90-45)*3,abs(tick%90-45)*3);
						ellipse(objects[a].x,objects[a].y,objects[a].val*(0.8+abs(tick%60-30)/180)/7,objects[a].val*(0.8+abs((tick+30)%60-30)/180)/7);
						if(options.graphics){
							if(tick%3==0){
								append(particles,{x:objects[a].x+random(-20,20),y:objects[a].y+random(-20,20),xvelo:random(-2,2),yacc:random(0.1,0.4),
								size:random(7,10),op:random(180,220),opc:-12,exp:1,color:[random(200,255),random(60),random(60)]});
							}
						}
					},
					run:function(){
						objects[a].dir=dirgeneric(objects[a].x,objects[a].y,player.x,player.y);
						objects[a].x+=sin(objects[a].dir)*2*min(1,pow(pow(player.x-objects[a].x,2)+pow(player.y-objects[a].y,2),0.5)/150);
						objects[a].y-=cos(objects[a].dir)*2*min(1,pow(pow(player.x-objects[a].x,2)+pow(player.y-objects[a].y,2),0.5)/150);
						if(playerhitbox(objects[a].x,objects[a].y,objects[a].val/28+10)){
							objects[a].val-=15;
							if(player.hp<player.mhp){
								regen(0.06+player.mhp*0.0004);
								playertemp.slow=max(playertemp.slow,0.55);
							}
						}
						objects[a].val-=1;
						if(objects[a].val<=0){
							objects.splice(a,1);
							a-=1;
						}
					}
				});
			}
		});
	}
	if(player.mods[25]){
		append(player.modfuncs.passive,function(){
			if(player.energy>0.001){
				player.energy-=0.001;
				if(playertemp.framestabilizer){
					player.instability-=200;
					playertemp.framestabilizer=0;
				}
			}
			else{
				if(!(playertemp.framestabilizer)){
					player.instability+=200;
					playertemp.framestabilizer=1;
				}
			}
		});
	}
}
var playertemp={};
var stagetemp={};
var biomelist=[
	{name:"Scorched Skies",rgb:[220,170,0]},
	{name:"Tranquil Forest",rgb:[100,255,100]},
	{name:"Drowned Abyss",rgb:[0,0,150]},
	{name:"Disputed Space",rgb:[255,0,0]},
	//{name:"The Void",rgb:[0,0,0]},
];
var viewmodtype=0;
var mods={
	weapon:[
		{id:8,name:"Charged Weapons",desc:"Charges your main weapon",pro:"Increases rate of fire by 40%",con:"Attempting to fire without sufficient ammo damages your shield"},
		{id:9,name:"Rapid Reload",desc:"Boosts your ammo regeneration",pro:"Increases ammo recharge rate by 50%",con:"Your shield cannot regenerate unless at full ammo"},
		{id:10,name:"Energized Feedback",desc:"Absorbs the entropy created from destruction",pro:"Gain energy when you deal damage, doubled for normal shots (based on base damage)",con:"Passively burns energy. Also, backfires when you take damage, losing energy - reduced by 67% for damage blocked by shielding"},
		{id:11,name:"Heavy Impact",desc:"Makes things go boom",pro:"Increases damage dealt by 50%",con:"Your hits fling debris which can hit you"},
		{id:18,name:"Soul Eater",desc:"Makes your ship demonic. Your damage is now based on how many souls held.",pro:"Kill enemies and harvest their souls. Each soul increases damage by 1%.",con:"Your ship's base damage is halved. The more souls you have, the faster they are lost."},
		{id:20,name:"Shockwave Generator",stab:-50,desc:"Adds a shockwave generator to your ship",pro:"Creates a delayed explosion on defeated enemies",con:"This effect costs ammo (refunded it doesn't hit anything). Additionally, reduces stability by 50 and maximum energy by 1"},
		{id:21,name:"Stock Fabricator",desc:"Adds mass fabricators to your ship",pro:"Generates ammo when below 40%",con:"Uses energy"},
		{id:23,name:"Essence Leech",stab:-90,desc:"Allows your ship to succ",pro:"Dealing damage spawns life pools which can be absorbed to heal",con:"Absorbing life pools slows you. Additionally, reduces healing recieved by 50%, stability by 90, and maximum energy by 1"},
	],
	ship:[
		{id:0,name:"Reinforced Hull",stab:-50,desc:"Extra plating for survivability",pro:"Increases ship health by 50% and healing recieved by 20%",con:"Reduces stability by 50 and speed by 15%"},
		{id:1,name:"Reactors",desc:"Adds reactors to your ship",pro:"Passively generates energy",con:"Reduces maximum shield by 30%. Damage to your ship (after shields) has a 40% chance to be doubled."},
		{id:6,name:"Nano Repairbots",desc:"Adds repair bots on your ship",pro:"Passively repairs your ship if it hasn't taken damage recently",con:"Uses a fair amount of energy"},
		{id:12,name:"Energy Replicator",stab:-150,desc:"Adds an energy replicator to your ship",pro:"Gain an additional energy from energy orbs and increases maximum energy by 20%",con:"Reduces ship stability by 150"},
		{id:13,name:"Funky Jukebox",desc:"Messes up the background music",pro:"May be amusing",con:"May get annoying"},
		{id:14,name:"Healing conversion",desc:"Converts energy from orbs into healing",pro:"Heal when collecting an energy orb",con:"Reduces energy gained from collecting normal energy orbs by 1"},
		{id:15,name:"Swift Decay",desc:"Causes wither to dissolve faster",pro:"Frequently cleanses some wither",con:"You take damage when this happens. This damage cannot be blocked by shielding"},
		{id:17,name:"Complex Thrusters",stab:50,desc:"Modifies your ship's thrusters",pro:"Increases speed by 20% and stability by 50",con:"Briefly reduces speed when damage is taken"},
		{id:24,name:"Malleable Hull",stab:100,desc:"Makes your ship's frame morphable in the name of stability",pro:"Increases stability by 100",con:"Take 50% more damage for 3 seconds after taking a hit"},
		{id:25,name:"Frame Stabilizer",stab:200,desc:"Adds a frame stabilizer to your ship",pro:"Increases stability by 200",con:"Constantly drains energy - stability bonus is lost if out of energy"},
		{id:26,name:"Chrome Plating",stab:-150,desc:"Adds chrome plating to your ship",pro:"Passively generates a small damage barrier at no cost",con:"Reduces stability by 150"},
	
	],
	shield:[
		{id:2,name:"Innervated Shields",stab:-50,desc:"Rerouts some of your ship's batteries to its shield",pro:"Increases parry time by 2 and shield regeneration by 50%",con:"Reduces maximum energy by 25% and stability by 50, and increases shield decay by 25%"},
		{id:3,name:"Shield Recharger",desc:"Activates while below 50% shield - recharge is doubled while not shielding",pro:"Rapidly recharges shield",con:"Uses energy"},
		{id:4,name:"Mobile Shield",desc:"Allows your ship's thrusters to bypass its shield",pro:"Allows movement while shielding",con:"Also allows 5% of damage to bypass shield"},
		{id:5,name:"Reactive Shield",desc:"Adds automatic collision detection to your ship",pro:"Your shield blocks hits even while not in use",con:"Constantly drains a small amount of energy, goes on cooldown after activating"},
		{id:7,name:"Energy Capacitor",desc:"Replaces your energy storage with a capacitor",pro:"Gain energy when your shield is hit. Energy gain is maximized when parrying",con:"Lose energy passively"},
		{id:16,name:"Heavy Shields",stab:-50,desc:"Adds extra shield batteries",pro:"Increases maximum shields by 80%",con:"Shielding briefly slows you. Additionally, reduces stability by 50 and parry time by 2"},
		{id:19,name:"Parry Addiction",desc:"Makes your ship addicted to parrying",pro:"Heal when parrying (0.5 second cooldown)",con:"Suffer withdrawal symptoms (wither) if you haven't parried in too long (10 seconds)"},
		{id:22,name:"EMP",desc:"Adds an EMP device to your ship's shields",pro:"Stores a charge while shielding (up to 2 seconds). When released, damages nearby enemies and briefly stuns them while destroying enemy projectiles",con:"Uses shield, stun doesn't work on bosses"},
	
	]
};
var ships=[
	{name:"Astrohawk",unlocked:1,sprite:"astrohawk",damage:6,health:5,shield:5,energy:10,speed:6,special:"Berserk for 2 seconds while emitting a screech which deals heavy damage to enemies caught in the AoE while dragging them. Also reflects enemy projectiles. Dissipates if it hits a boss.",misc:"A well-rounded ship."},
	{name:"Crystal Vanguard",unlocked:1,sprite:"crystalvanguard",damage:7,health:2,shield:4,energy:8,speed:5,special:"Surrounds your ship with razor-sharp crystals which deal continuous damage to nearby enemies while absorbing damage taken.",misc:"Normal shots fragment on hit."},
	{name:"Fairgrave's Vessel",unlocked:1,sprite:"fairgravesvessel",damage:5,health:4,shield:3,energy:7,speed:7,special:"Unleashes raging spirits which fly at random enemies.",misc:"Briefly phase through enemies and projectiles after blocking with shield. Gain health on kill. Immune to water-based slows. Additionally, you cannot die while you have energy (lose energy based on health below 0)."},
	{name:"Cyber Sphere",unlocked:1,sprite:"cybersphere",damage:8,health:9,shield:7,energy:12,speed:2,special:"Fire a steady laser of death.",misc:"Basically a flying fortress of doom."},
	{name:"Paper Plane",unlocked:1,sprite:"paperplane",damage:10,health:1,shield:2,energy:10,speed:10,special:"Violently rips paper out of all enemies, sending it flying with triple the quantity. The fragments are more likely to fly away from you. Additionally, you are briefly shielded from all damage if used successfully.",misc:"Normal shots embed paper in foes, increasing damage taken by paper shots. Killing enemies with paper fragments restores ammo."},
	{name:"Blademaster",unlocked:1,sprite:"blademaster",damage:7,health:4,shield:5,energy:8,speed:7,special:"Rapidly strike nearby enemies while phasing through attacks and projectiles. Has a brief cooldown.",misc:"Normal shots are replaced by spinning, slicing nearby enemies. Parrying charges your next basic attack with a sword missile (can store up to 2 charges)."},
];
var player={
	hpl:0,
	shielding:0,
	shieldboing:0,
	x:500,
	y:600,
	xvelo:0,
	yvelo:0,
	staticspeed:15,
	stun:0,
	ammo:100,
	shootcd:0,
	specialcd:0,
	movedir:0,
	score:0,
	deathtimer:0,
	wither:0,
	mods:options.shipMods,
	modfuncs:{
		passive:new Array(),
		damagetaken:new Array(),
	},
	shipfuncs:{},
	tinker:{
		damage:0,
		health:0,
		shield:0,
		energy:0,
		speed:0,
		compaction:0,
	},
	sizemod:1
};
var spawnplayer=function(){
	player.sizemod=1;
	player.hpl=0;
	player.hpg=0;
	player.shielding=0;
	player.shieldboing=0;
	player.x=500;
	player.y=600;
	player.staticspeed=15;
	player.stun=0;
	player.shielddisable=0;
	player.ammo=100;
	player.shootcd=0;
	player.specialcd=0;
	player.movedir=0;
	player.score=0;
	player.deathtimer=0;
	player.wither=0;
	player.parrytimer=6;
	playertemp={timesincedamagetaken:999};
}
applyshipstats[options.shipId]();
var input={
	shoot:0,
	special:0
};
var particles=new Array();
var mapwasd=function(){
	if(rawkeys.w){
		if(rawkeys.a){
			return(7*PI/4);
		}
		else if(rawkeys.d){
			return(PI/4);
		}
		else{
			return(0);
		}
	}
	else if(rawkeys.d){
		if(rawkeys.s){
			return(3*PI/4);
		}
		else{
			return(PI/2);
		}
	}
	else if(rawkeys.s){
		if(rawkeys.a){
			return(5*PI/4);
		}
		else{
			return(PI);
		}
	}
	else if(rawkeys.a){
		return(3*PI/2);
	}
}
var ctrdir=function(){
	if(navigator.getGamepads()[0].axes[1]>0){
		return(PI+atan(navigator.getGamepads()[0].axes[0]/(-navigator.getGamepads()[0].axes[1])));
	}
	else{
		return(atan(navigator.getGamepads()[0].axes[0]/(-navigator.getGamepads()[0].axes[1])));
	}
}
var ctrmov=function(){
		if(navigator.getGamepads()[0].axes[0]==-1||navigator.getGamepads()[0].axes[1]==-1||navigator.getGamepads()[0].axes[0]+navigator.getGamepads()[0].axes[1]>0.01||navigator.getGamepads()[0].axes[0]+navigator.getGamepads()[0].axes[1]<-0.01){
			if(abs(navigator.getGamepads()[0].axes[0])>abs(navigator.getGamepads()[0].axes[1])){
				return(abs(navigator.getGamepads()[0].axes[0]));
			}
			return(abs(navigator.getGamepads()[0].axes[1]));
		}
	return(0);
}
var getmovedir=function(){
	if(controlmode==0){
		return({dir:dirgeneric(player.x,player.y,mouseX,mouseY),scl:min(1,pow(pow(player.x-mouseX,2)+pow(player.y-mouseY,2),0.5)/50)});
	}
	else if(controlmode==1){
		if(rawkeys.w||rawkeys.a||rawkeys.s||rawkeys.d){
			return({dir:mapwasd(),scl:1});
		}
	}
	else if(controlmode==2||controlmode==3){
		if(navigator.getGamepads()[0]){
			return({dir:ctrdir(),scl:ctrmov()});
		}
	}
	return({dir:0,scl:0});
}
var moveinf;
var temp;
var domove=function(){
	if(player.shielding&!(player.mods[4])){
		moveinf={dir:0,scl:0};
	}
	else{
		moveinf=getmovedir();
		player.movedir;
		if(!(ingame)||player.instability<(player.hp/player.mhp)*100||player.instability<=0){
			player.xvelo=0;
			player.yvelo=0;
			player.x=min(900,max(100,player.x+sin(moveinf.dir)*moveinf.scl*(1-playertemp.slow)*(1+playertemp.speed)*max(player.staticspeed,player.speed)));
			player.y=min(700,max(25,player.y-cos(moveinf.dir)*moveinf.scl*(1-playertemp.slow)*(1+playertemp.speed)*max(player.staticspeed,player.speed)));
		}
		else{
			player.xvelo*=0.93;
			player.yvelo*=0.93;
			player.xvelo+=sin(moveinf.dir)*moveinf.scl*(1-playertemp.slow)*(1+playertemp.speed)*max(player.staticspeed,player.speed);
			player.yvelo-=cos(moveinf.dir)*moveinf.scl*(1-playertemp.slow)*(1+playertemp.speed)*max(player.staticspeed,player.speed);
			player.x=min(900,max(100,player.x+player.xvelo/20));
			player.y=min(700,max(25,player.y+player.yvelo/20));
		}
	}
}
var doshield=function(){
	if(player.shield<=0){
		player.shielddisable=15;
		player.shield=0.1;
	}
	temp=player.shielding;
	player.shielding=0;
	if(player.shield>0&input.shield&!(player.shielddisable)){
		player.shielding=1;
	}
	if(temp&!(player.shielding)){
		sfx.shieldoff.rate(random(0.9,1.1));
		sfx.shieldoff.volume(options.sfx);
		sfx.shieldoff.play();
	}
	else if(!(temp)&player.shielding){
		sfx.shieldon.rate(random(0.9,1.1));
		sfx.shieldon.volume(options.sfx);
		sfx.shieldon.play();
	}
}
var doinputs=function(){
	input={
		shoot:0,
		special:0,
		shield:0
	};
	if(controlmode==0){
		if(mousePressed){
			if(mouseButton==LEFT){
				input.shoot=1;
			}
			if(mouseButton==RIGHT){
				input.shield=1;
			}
		}
		if(rawkeys.space){
			input.special=1;
		}
	}
	else if(controlmode==1){
		if(rawkeys.v){
			input.shoot=1;
		}
		if(rawkeys.b){
			input.special=1;
		}
		if(rawkeys.n||rawkeys.m){
			input.shield=1;
		}
	}
	else if(controlmode==2){
		if(navigator.getGamepads()[0]){
			if(navigator.getGamepads()[0].buttons[1].value){
				input.shoot=1;
			}
			if(navigator.getGamepads()[0].buttons[0].value){
				input.special=1;
			}
			if(navigator.getGamepads()[0].buttons[8].value||navigator.getGamepads()[0].buttons[9].value){
				input.shield=1;
			}
		}
	}
	else if(controlmode==3){
		if(navigator.getGamepads()[0]){
			if(navigator.getGamepads()[0].buttons[9].value){
				input.shoot=1;
			}
			if(navigator.getGamepads()[0].buttons[8].value){
				input.special=1;
			}
			if(navigator.getGamepads()[0].buttons[0].value||navigator.getGamepads()[0].buttons[1].value){
				input.shield=1;
			}
		}
	}
}
var parallax=new Array();
var findpspot=function(dis){
	for(b=0;b<parallax.length;b+=1){
		if(dis>=parallax[b].d){
			return(b);
		}
	}
	return(parallax.length);
}
var canstart=0;
var bgmn=0;
var bgm;
var sprites={astrohawk:loadShape('Data/Graphics/ships/astrohawk.svg')};
var getoptions=function(){
	if(loadStrings("infiniteSpace/options.txt")[1]==1){
		return(JSON.parse(loadStrings("infiniteSpace/options.txt")[0]));
	}
	else{
		return({
			graphics:1,
			stars:1,
			music:0.7,
			sfx:0.7,
			shipId:0,
			shipMods:new Array(99),
			misc:new Array(99),
			custom:{
				active:0,
				starttime:0,
				forcebiome:0,
				disabledbiomes:new Array(99),
				misc:new Array(99)
			}
		});
	}
}
var loadassetscache=function(){
	textFont(0,60);
	fill(0,0,0,100);
	rect(0,0,1133,700);
	fill(255,150,0);
	text("Loading game assets",300,200);
	fill(0,0,0);
	rect(350,350,300,150);
	fill(255,150,0);
	text("0/3",500,370);
		loadassetscache=function(){
		textFont(0,60);
		fill(0,0,0,100);
		rect(0,0,1133,700);
		fill(255,150,0);
		text("Loading game assets",300,200);
		fill(0,0,0);
		rect(350,320,300,150);
		fill(255,150,0);
		text("0/3",500,370);
		bgmn="start";
		bgmv=0.4;
		bgm = new Howl({
			src: 'Data/Sound/bgm/Mysterious.mp3',
			autoplay: true,
			loop: true,
			volume: options.music*0.4,
		});
		fill(0,0,0);
		rect(350,320,300,150);
		fill(255,150,0);
		text("1/3",500,370);
		sprites={
			astrohawk:loadShape('Data/Graphics/ships/astrohawk.svg'),
			crystalvanguard:loadShape('Data/Graphics/ships/crystalvanguard.svg'),
			fairgravesvessel:loadShape('Data/Graphics/ships/fairgravesvessel.svg'),
			cybersphere:loadShape('Data/Graphics/ships/cybersphere.svg'),
			paperplane:loadShape('Data/Graphics/ships/paperairplane.svg'),
			blademaster:loadShape('Data/Graphics/ships/blademaster.svg'),
			leviathan:loadShape('Data/Graphics/leviathan.svg'),
		};
		fill(0,0,0);
		rect(350,320,300,150);
		fill(255,150,0);
		text("2/3",500,370);
		sfx={
			laser:new Howl({src: ['Data/Sound/sfx/laser.ogg'],autoplay:false,loop:false,volume:options.sfx*1.8}),
			destroy:new Howl({src: ['Data/Sound/sfx/destroy.ogg'],autoplay:false,loop:false,volume:options.sfx*7}),
			minigun:new Howl({src: ['Data/Sound/sfx/minigun.wav'],autoplay:false,loop:false,volume:options.sfx*0.55}),
			boom:new Howl({src: ['Data/Sound/sfx/avalanche.ogg'],autoplay:false,loop:false,volume:options.sfx}),
			click:new Howl({src: ['Data/Sound/sfx/click.wav'],autoplay:false,loop:false,volume:options.sfx*0.5}),
			shieldon:new Howl({src: ['Data/Sound/sfx/shield.wav'],autoplay:false,loop:false,volume:options.sfx}),
			shieldoff:new Howl({src: ['Data/Sound/sfx/shieldoff.wav'],autoplay:false,loop:false,volume:options.sfx}),
			shieldbreak:new Howl({src: ['Data/Sound/sfx/shieldbreak.wav'],autoplay:false,loop:false,volume:options.sfx}),
			block:new Howl({src: ['Data/Sound/sfx/block.wav'],autoplay:false,loop:false,volume:options.sfx}),
			hawk:new Howl({src: ['Data/Sound/sfx/hawk.ogg'],autoplay:false,loop:false,volume:options.sfx}),
			hull:new Howl({src: ['Data/Sound/sfx/armorpartial.ogg'],autoplay:false,loop:false,volume:options.sfx*2}),
			hit:new Howl({src: ['Data/Sound/sfx/arrow hit.wav'],autoplay:false,loop:false,volume:options.sfx*2}),
			glacialshoot:new Howl({src: ['Data/Sound/sfx/glacial ward charge.wav'],autoplay:false,loop:false,volume:options.sfx*0.3}),
			glacialhit:new Howl({src: ['Data/Sound/sfx/glacial ward shatter.wav'],autoplay:false,loop:false,volume:options.sfx*0.2}),
			distortion:new Howl({src: ['Data/Sound/sfx/distortion.ogg'],autoplay:false,loop:false,volume:options.sfx*0.9}),
			incinerate:new Howl({src: ['Data/Sound/sfx/incinerate.ogg'],autoplay:false,loop:false,volume:options.sfx*0.9}),
			might:new Howl({src: ['Data/Sound/sfx/might.ogg'],autoplay:false,loop:false,volume:options.sfx*1.8}),
			deathlaser:new Howl({src: ['Data/Sound/sfx/shockwavecannoncharge.ogg'],autoplay:false,loop:false,volume:options.sfx*1.8}),
			wither:new Howl({src: ['Data/Sound/sfx/wither.ogg'],autoplay:false,loop:false,volume:options.sfx*2.5}),
			paper:new Howl({src: ['Data/Sound/sfx/paper.ogg'],autoplay:false,loop:false,volume:options.sfx*2.5}),
			splat:new Howl({src: ['Data/Sound/sfx/death-mark.mp3'],autoplay:false,loop:false,volume:options.sfx}),
			bomb:new Howl({src: ['Data/Sound/sfx/bomb.wav'],autoplay:false,loop:false,volume:options.sfx}),
			finisher:new Howl({src: ['Data/Sound/sfx/finisher.ogg'],autoplay:false,loop:false,volume:options.sfx*3}),
			parry:new Howl({src: ['Data/Sound/sfx/parry.ogg'],autoplay:false,loop:false,volume:options.sfx}),
			shockwave:new Howl({src: ['Data/Sound/sfx/shockwave.ogg'],autoplay:false,loop:false,volume:options.sfx}),
			emp:new Howl({src: ['Data/Sound/sfx/emp.ogg'],autoplay:false,loop:false,volume:options.sfx}),
			blades:new Howl({src: ['Data/Sound/sfx/blades.ogg'],autoplay:false,loop:false,volume:options.sfx}),
			bladestorm:new Howl({src: ['Data/Sound/sfx/bladestorm.ogg'],autoplay:false,loop:false,volume:options.sfx}),
		};
		options=getoptions();
		loadassetscache=0;
		canstart=1;
		player.mods=options.shipMods;
		if(options.misc[0]){
			player.tinker.damage=options.misc[0];
		}
		if(options.misc[1]){
			player.tinker.health=options.misc[1];
		}
		if(options.misc[2]){
			player.tinker.shield=options.misc[2];
		}
		if(options.misc[3]){
			player.tinker.energy=options.misc[3];
		}
		if(options.misc[4]){
			player.tinker.speed=options.misc[4];
		}
		if(options.misc[5]){
			player.tinker.compaction=options.misc[5];
		}
		spawnplayer();
		applyshipstats[options.shipId]();
		applymods();
		bgm.volume(options.music*bgmv);
	}
}
var choosebgm=function(id){
	temp=max(0,round(random(setbgm.length)-0.51));
	while(temp==id){
		temp=max(0,round(random(setbgm.length)-0.51));
	}
	return(temp);
}
var bgmt;
var bgmv=1;
var setbgmt=[
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/magickaforest.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*0.95,
			onend:function(){setbgmt[1]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/woods.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*0.55,
			onend:function(){setbgmt[0]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/abyss.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*1.2,
			onend:function(){setbgmt[3]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/abyssal ruins.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*0.9,
			onend:function(){setbgmt[2]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/Inviolate.mp3',
			autoplay: true,
			loop: false,
			volume: options.music*0.45,
			onend:function(){setbgmt[5]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/StrangeOccurrences.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*0.5,
			onend:function(){setbgmt[4]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/Glitch.mp3',
			autoplay: true,
			loop: false,
			volume: options.music*0.7,
			onend:function(){setbgmt[7]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/NoIx1B.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*0.55,
			onend:function(){setbgmt[6]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/aftermath.mp3',
			autoplay: true,
			loop: false,
			volume: options.music*0.7,
			onend:function(){setbgmt[9]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/the hole.mp3',
			autoplay: true,
			loop: false,
			volume: options.music*0.7,
			onend:function(){setbgmt[8]();}
		});
	},
	function(){
		if(bgmt){
			bgmt.stop();
		}
		bgmt=new Howl({
			src: 'Data/Sound/bgm/robot builder.mp3',
			autoplay: true,
			loop: true,
			volume: options.music*0.7
		});
	},

];
var setbgm=[
	function(){
		bgm.stop();
		bgmv=0.7;
		bgmn="sky fortress";
		bgm = new Howl({
			src: 'Data/Sound/bgm/SkyFortress.mp3',
			autoplay: true,
			loop: false,
			volume: options.music*0.7,
			onend:function(){setbgm[choosebgm(0)]();}
		});
	},
	function(){
		bgm.stop();
		bgmv=1.3;
		bgmn="magnetic tree";
		bgm = new Howl({
			src: 'Data/Sound/bgm/Lifeformed The Magnetic Tree.mp3',
			autoplay: true,
			loop: false,
			volume: options.music*1.3,
			onend:function(){setbgm[choosebgm(1)]();}
		});
	},
	function(){
		bgm.stop();
		bgmv=1.2;
		bgmn="bigman";
		bgm = new Howl({
			src: 'Data/Sound/bgm/bigman.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*1.2,
			onend:function(){setbgm[choosebgm(2)]();}
		});
	},
	function(){
		bgm.stop();
		bgmv=0.9;
		bgmn="cryingsoul";
		bgm = new Howl({
			src: 'Data/Sound/bgm/Crying Soul.ogg',
			autoplay: true,
			loop: false,
			volume: options.music*0.9,
			onend:function(){setbgm[choosebgm(3)]();}
		});
	}
];
var engineparticles=0;
var viewmod=0;
var createstar=function(y){
		if(random(1)<0.3){
			//oddstar
			addstar(y,random(105)+min(1,round(random(2)))*150,random(105)+min(1,round(random(2)))*150,random(105)+min(1,round(random(2)))*150,random(50,200),random(10,50));
		}
		else if(random(1)<0.3){
			//white dwarf
			addstar(y,random(220,255),random(220,255),random(220,255),random(220,255),random(7,10));
		}
		else if(random(1)<0.35){
			//blue star
			addstar(y,random(110,140),random(110,140),random(200,255),random(90,180),random(9,30));
		}
		else if(random(1)<0.65){
			//yellow star
			addstar(y,random(160,255),random(160,255),random(10,20),random(120,200),random(25,90));
		}
		else if(random(1)<0.7){
			//red giant
			addstar(y,random(200,255),random(20,90),random(10,20),random(120,200),random(70,200));
		}
		else{
			//dark matter kappa
			addstar(y,0,0,0,random(10,20),random(30,250));
		}
};
var addstar=function(y,r,g,b,o,size){
	var dis=random(2,15);
	parallax.splice(findpspot(dis),0,{
		x:random(50,950),
		y:y,
		size:size,
		c:{r:r,g:g,b:b},
		o:o,
		d:dis
	});
};
var runpara=function(){
	for(a=0;a<parallax.length;a+=1){
		//fill(parallax[a].c.r,parallax[a].c.g,parallax[a].c.b,parallax[a].o);
		//ellipse(parallax[a].x,parallax[a].y,parallax[a].size/parallax[a].d,parallax[a].size/parallax[a].d);
		if(render){
			var starmods=[true,1];
			if(ingame==0&menumode==2){
				starmods[0]=false;	
			}
			if(biome.temp){
				if(biome.temp.obscurestars){
					starmods[1]=1+biome.temp.obscurestars/10;
					if(-parallax[a].d-biome.temp.obscurestars<-15){
						starmods[0]=false;
					}
				}
			}
			if(starmods[0]){
				if(options.stars>1){
					fill(parallax[a].c.r/2/starmods[1],parallax[a].c.g/2/starmods[1],parallax[a].c.b/2/starmods[1],parallax[a].d*parallax[a].o/10);
					for(b=0;b<60/parallax[a].d;b+=1){
						ellipse(parallax[a].x,parallax[a].y,(parallax[a].size*b/30),(parallax[a].size*b/30));
					}
				}
				else{
					fill(parallax[a].c.r/2/starmods[1],parallax[a].c.g/2/starmods[1],parallax[a].c.b/2/starmods[1],parallax[a].o);
					ellipse(parallax[a].x,parallax[a].y,(parallax[a].size*2)/parallax[a].d,(parallax[a].size*2)/parallax[a].d);
				}
			}
		}
		parallax[a].y+=1/parallax[a].d;
		if(parallax[a].y>800){
			parallax.splice(a,1);
			a-=1;
		}
	}
};
for(a=0;a<500;a+=1){
	createstar(a*8-100);
};
var playerhitbox=function(x,y,size){
	if(x-player.x<size+player.size&x-player.x>-size-player.size&y-player.y<size+player.size&y-player.y>-size-player.size){
		return(true);
	}
	return(false);
}
var hitbox=function(x1,y1,x2,y2,size){
	if(x1-x2<size&x1-x2>-size&y1-y2<size&y1-y2>-size){
		return(true);
	}
	return(false);
}
var hitboxr=function(x1,y1,x2,y2,sizex,sizey){
	if(x1-x2<sizex&x1-x2>-sizex&y1-y2<sizey&y1-y2>-sizey){
		return(true);
	}
	return(false);
}
var dmg;
var parrymatrix=new Array();
var takedamage=function(dmgs){
	dmg=dmgs;
	if(dmg.shieldlag){
		dmg.blocked=true;
		dmg.actblocked=false;
	}
	else{
		dmg.blocked=false;
		if(!(dmg.pure||dmg.shieldpen)&player.shielding){
			player.shieldboing+=dmg.dmg;
			append(objects,{
				dur:player.parrytimer,
				draw:function(){
					noFill();
					stroke(255,255,100+abs(tick%100-50),objects[a].dur*45);
					ellipseMode(CENTER);
					strokeWeight(25);
					arc(player.x,player.y,80+player.size*3,25+player.size*4,-PI*0.7,-PI*0.3);
					noStroke();
					if(options.graphics){
						fill(255,255,255,6);
						rect(100,0,800,700);
					}
				},
				run:function(){
					objects[a].dur-=1;
					if(objects[a].dur<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
			append(parrymatrix,{dmg:dmg.dmg,timer:player.parrytimer});
			dmg.dmg=0;
		}
	}
	if(!(dmg.pure)){
		for(z=0;z<player.modfuncs.damagetaken.length;z+=1){
			player.modfuncs.damagetaken[z]();
		}
		if(player.shipfuncs.dmgtaken){
			player.shipfuncs.dmgtaken();
		}
		if(!(dmg.shieldpen)){
			if(player.shielding||playertemp.autoshield){
				dmg.blocked=true;
			}
			if(!(dmg.blocked)&(player.mods[5]&(playertemp.reactiveshieldtimer>0||!(playertemp.reactiveshieldcd>0)))){
				dmg.blocked=true;
				if(!(playertemp.reactiveshieldcd>0)){
					playertemp.reactiveshieldcd=360;
					playertemp.reactiveshieldtimer=60;
				}
			}
		}
	}
	if(dmg.blocked){
		if(dmg.dmg>0){
			player.shieldboing+=dmg.dmg;
			if(dmg.dmg>player.shield){
				dmg.dmg-=player.shield;
				player.shieldboing+=player.shield;
				for(cp=0;cp<player.shield;cp+=1){
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(8,11),op:random(120,180),opc:-7,exp:1,color:[random(70,120),random(70,120),random(200,255)]});
				}
				player.shield=0;
			}
			else{
				sfx.block.rate(random(0.9,1.1));
				sfx.block.volume(options.sfx);
				sfx.block.play();
				player.shield-=dmg.dmg;
				for(cp=0;cp<dmg.dmg;cp+=1){
					append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-3,3),yvelo:random(-3,3),
					size:random(8,11),op:random(120,180),opc:-7,exp:1,color:[random(70,120),random(70,120),random(200,255)]});
				}
				dmg.dmg=0;
			}
		}
	}
	if(!(dmg.pure)){
		for(z=0;z<player.modfuncs.damagetakenps.length;z+=1){
			player.modfuncs.damagetakenps[z]();
		}
		if(player.shipfuncs.dmgtakenps){
			player.shipfuncs.dmgtakenps();
		}
	}
	if(dmg.dmg>0){
		playertemp.timesincedamagetaken=0;
		sfx.hull.rate(random(0.9,1.1));
		sfx.hull.volume(options.sfx*2.5*min(1,dmg.dmg/10));
		sfx.hull.play();
		player.hp-=dmg.dmg;
		player.hpl+=dmg.dmg;
	}
}
var dtags;
var dealdamage=function(dmgs,target,tags){
	dmg=dmgs;
	dtags=tags;
	if(tags){
		if(tags.singleTarget){
			if(enemies[target].stdm){
				dmg*=enemies[target].stdm;
			}
		}
		if(tags.reflected){
			if(enemies[target].refdmgm){
				dmg*=enemies[target].refdmgm;
			}
		}
	}
	if(enemies[target].dmgm){
		dmg*=enemies[target].dmgm;
	}
	for(z=0;z<player.modfuncs.damagedealt.length;z+=1){
		player.modfuncs.damagedealt[z](min(enemies[target].hp,dmgs),target);
	}
	return(dmg);
}
var dohit=function(damage,target){
	enemies[target].hp-=dealdamage(damage,target);
	sfx.hit.rate(random(0.8,1.2));
	sfx.hit.volume(options.sfx*min(1.5,damage/20));
	sfx.hit.play();
	for(cp=0;cp<damage/2;cp+=1){
		append(particles,{x:enemies[target].x+random(-enemies[target].size,enemies[target].size),y:enemies[target].y+random(-enemies[target].size,enemies[target].size),xvelo:random(-2,2),yvelo:random(-2,2),
		size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(120,160),random(70,120)]});
	}
}
var canhitenemy=function(){
	for(c=0;c<projectiles[a].hits.length;c+=1){
		if(projectiles[a].hits[c]==enemies[b].id){
			return(false);
		}
	}
	return(true);
}
var healval;
var heal=function(val){
	healval=val;
	if(player.modfuncs.onheal){
		for(z=0;z<player.modfuncs.onheal.length;z+=1){
			player.modfuncs.onheal[z]();
		}
	}
	player.hpg=min(player.mhp-player.hp,healval);
	player.hp=min(player.mhp,player.hp+healval);
}
var regen=function(val){
	healval=val;
	if(player.modfuncs.onheal){
		for(z=0;z<player.modfuncs.onheal.length;z+=1){
			player.modfuncs.onheal[z]();
		}
	}
	player.hp+=healval;
}
var recalinstability=function(){
	player.instability=(player.tinker.damage+player.tinker.health+player.tinker.shield+player.tinker.energy+player.tinker.speed+player.tinker.compaction)*2;
	for(r=0;r<mods.weapon.length;r+=1){
		if(mods.weapon[r].stab){
			if(player.mods[mods.weapon[r].id]){
				player.instability-=mods.weapon[r].stab;
			}
		}
	}
	for(r=0;r<mods.ship.length;r+=1){
		if(mods.ship[r].stab){
			if(player.mods[mods.ship[r].id]){
				player.instability-=mods.ship[r].stab;
			}
		}
	}
	for(r=0;r<mods.shield.length;r+=1){
		if(mods.shield[r].stab){
			if(player.mods[mods.shield[r].id]){
				player.instability-=mods.shield[r].stab;
			}
		}
	}
}
var tinkerbutton=function(x,y,display,name){
	textFont(0,24);
	fill(255,150,255);
	text(display+": "+player.tinker[name],x-20,y-50,200,55);
	fill(0,0,0);
	rect(x,y,200,40,10);
	fill(0,200,0);
	rect(x,y,100+player.tinker[name],40,10);
	fill(250,255,90);
	rect(x+85+player.tinker[name],y-10,30,60,8);
	if(input.shoot&!(shootlock)){
		if(hitboxr(x+100,y+20,player.x,player.y,110,40)){
			if(!(player.tinker[name]==max(-100,min(100,round((player.x-x-100)))))){
				player.tinker[name]=max(-100,min(100,round((player.x-x-100))));
				recalinstability();
			}
		}
		if(hitboxr(x-25,y+17,player.x,player.y,15,15)){
			shootlock=1;
			player.tinker[name]=max(-100,player.tinker[name]-1);
			recalinstability();
		}
		if(hitboxr(x+215,y+17,player.x,player.y,15,15)){
			shootlock=1;
			player.tinker[name]=min(100,player.tinker[name]+1);
			recalinstability();
		}
	}
	fill(255,30,30);
	rect(x-35,y+5,30,30,4);
	fill(180,0,0);
	triangle(x-12,y+10,x-12,y+30,x-30,y+20);
	fill(30,255,30);
	rect(x+205,y+5,30,30,4);
	fill(0,180,0);
	triangle(x+212,y+10,x+212,y+30,x+230,y+20);
}
var gametick=0;
var drawcount=0;
var drawcap=8;
var cdraw=0;
var render=1;
var ms=0;
var mslast=0;
var shootlock=0;
var pauselock=0;
void draw(){
if(player.modfuncs.fundamentals){
	for(z=0;z<player.modfuncs.fundamentals.length;z+=1){
		player.modfuncs.fundamentals[z]();
	}
}
if(controlmode==0||controlmode==1){
	if(rawkeys.esc){
		if(!(pauselock)){
			pauselock=1;
			if(unpaused){
				unpaused=0;
				fill(0,0,0,100);
				rect(0,0,1000,700);
				textFont(0,40);
				fill(255,160,40);
				text("GAME PAUSED",350,300);
			}
			else{
				unpaused=1;
			}
		}
	}
	else{
		pauselock=0;
	}
}
else if(controlmode==2||controlmode==3){
	if(navigator.getGamepads()[0].buttons[11].value>0){
		if(!(pauselock)){
			pauselock=1;
			if(unpaused){
				unpaused=0;
				fill(0,0,0,100);
				rect(0,0,1000,700);
				textFont(0,40);
				fill(255,160,40);
				text("GAME PAUSED",350,300);
			}
			else{
				unpaused=1;
			}
		}
	}
	else{
		pauselock=0;
	}
}
if(unpaused){
textAlign(TOP,LEFT);
cdraw=0;
fps.count+=1;
fps.second=second();
if(!(fps.second==fps.lastsecond)){
	fps.fps=fps.count;
	fps.lastsecond=fps.second;
	fps.count=0;
}
ms=millis();
drawcount+=(ms-mslast);
mslast=ms;
if(drawcount>166){
	drawcount=16.6;
	console.log("Resetting ticks - too much lag");
}
//Actual game loop
while(drawcount>=16.6&cdraw<=drawcap){
	drawcount-=16.6;
	cdraw+=1;
	if(drawcount<16.6){
		render=1;
	}
	else{
		render=0;
	}
	noStroke();
	tick+=1;
	fill(biome.color.r,biome.color.g,biome.color.b);
	rect(0,0,1000,700);
	if(options.stars>0){
		if(tick%12==0){
			createstar(-100);
		}
		ellipseMode(CENTER);
		runpara();
	}
	//Walls
	if(ingame==0&menumode==2){
		fill(40,40,60);
		rect(100,0,800,700);
		fill(70,70,90);
		for(a=0;a<9;a+=1){
			for(b=0;b<10;b+=1){
				rect(a*100+(b%3)*30,b*80,15,40,5);
			}
		}
	}
	//Run objects
	playertemp.slow=0;
	playertemp.speed=0;
	for(a=0;a<objects.length;a+=1){
		if(objects[a].startup){
			if(!(objects[a].startedup)){
				objects[a].startup();
				objects[a].startedup=true;
			}
		}
		if(objects[a]){
			if(render){
				if(objects[a].draw){
					objects[a].draw();
				}
			}
			if(objects[a].run){
				objects[a].run();
			}
		}
	}
	//Run projectiles
	for(pr=1;pr>=0;pr-=1){
		for(a=0;a<projectiles.length;a+=1){
			if(projectiles[a].target==pr){
				if(!(projectiles[a].scans)){
					projectiles[a].scans=1;
				}
				if(render){
					projectiles[a].draw();
				}
				if(projectiles[a].run){
					projectiles[a].run();
				}
				for(scn=0;scn<projectiles[a].scans;scn+=1){
					if(!(projectiles[a].exp==1)){
						projectiles[a].x+=sin(projectiles[a].dir)*projectiles[a].speed/projectiles[a].scans;
						projectiles[a].y-=cos(projectiles[a].dir)*projectiles[a].speed/projectiles[a].scans;
						if(projectiles[a].target){
							if(!(projectiles[a].hits)){
								projectiles[a].hits=new Array();
							}
							for(b=0;b<enemies.length;b+=1){
								if(!(projectiles[a].pierce<0)){
									if(enemies[b].hp>0){
										if(projectiles[a].x-enemies[b].x<projectiles[a].size+enemies[b].size&projectiles[a].x-enemies[b].x>-projectiles[a].size-enemies[b].size&
										projectiles[a].y-enemies[b].y<projectiles[a].size+enemies[b].size&projectiles[a].y-enemies[b].y>-projectiles[a].size-enemies[b].size){
											if(canhitenemy()){
												projectiles[a].pierce-=1;
												append(projectiles[a].hits,enemies[b].id);
												temp={};
												if(projectiles[a].onhit){
													projectiles[a].onhit(b);
												}
												if(projectiles[a].isSingleTarget){
													temp.singleTarget=1;
												}
												if(projectiles[a].basicAttack){
													temp.basicAttack=1;
												}
												if(projectiles[a].reflected){
													temp.reflected=1;
												}
												enemies[b].hp-=dealdamage(projectiles[a].damage,b,temp);
												sfx.hit.rate(random(0.8,1.2));
												sfx.hit.volume(options.sfx*min(1.5,projectiles[a].damage/20));
												sfx.hit.play();
												for(cp=0;cp<projectiles[a].damage/2;cp+=1){
													append(particles,{x:enemies[b].x+random(-enemies[b].size,enemies[b].size),y:enemies[b].y+random(-enemies[b].size,enemies[b].size),xvelo:random(-2,2),yvelo:random(-2,2),
													size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(120,160),random(70,120)]});
												}
												if(projectiles[a].pierce<0){
													projectiles[a].exp=1;
												}
											}
										}
									}
								}
							}
						}
						else{
							if(!(playertemp.phasing>0)){
								if(playerhitbox(projectiles[a].x,projectiles[a].y,projectiles[a].size)){
									if(projectiles[a].onhit){
										projectiles[a].onhit();
									}
									takedamage({dmg:projectiles[a].damage});
									projectiles[a].exp=1;
								}
							}
						}
					}
				}
				if(projectiles[a].end==1||projectiles[a].end==2){
					if(projectiles[a].y<-200||projectiles[a].y>900||projectiles[a].x>1100||projectiles[a].x<-100){
						projectiles[a].exp=1;
					}
				}
				else{
					projectiles[a].dur-=1;
					if(!(projectiles[a].dur>0)){
						projectiles[a].exp=1;
					}
				}
				if(projectiles[a].exp){
					if(projectiles[a].onend){
						projectiles[a].onend();
					}
					projectiles.splice(a,1);
					a-=1;
				}
			}
		}
	}
	//Run enemies
	for(a=0;a<enemies.length;a+=1){
		if(render){
			enemies[a].draw();
		}
		if(enemies[a].stun>0){
			enemies[a].stun-=1;
		}
		else{
			if(enemies[a].run){
				enemies[a].run();
			}
		}
		if(enemies[a].hp<=0){
			for(z=0;z<player.modfuncs.onkill.length;z+=1){
				player.modfuncs.onkill[z](a);
			}
			if(player.shipfuncs.onkill){
				player.shipfuncs.onkill(a);
			}
			if(enemies[a].ondeath){
				enemies[a].ondeath();
			}
			sfx.destroy.rate(random(0.85,1.15));
			sfx.destroy.volume(options.sfx*7);
			sfx.destroy.play();
			if(!(player.respawntimer>10)){
				player.score+=enemies[a].score;
			}
			enemies[a].exp=1;
		}
		if(enemies[a].exp){
			if(enemies[a].onend){
				enemies[a].onend();
			}
			enemies.splice(a,1);
			a-=1;
		}
	}
	//Run player stuff
	doinputs();
	if(player.hp<=player.wither&!(playertemp.cannotdie)){
		if(player.deathtimer>60){
			if(input.shoot){
				spawnplayer();
				if(bgmt){
					bgmt.stop();
				}
				biome.id=0;
				applyshipstats[player.shipId]();
				applymods();
				ingame=0;
				gametick=0;
				bgm.stop();
				bgmn="start";
				bgm = new Howl({
					src: 'Data/Sound/bgm/Mysterious.mp3',
					autoplay: true,
					loop: true,
					volume: options.music*0.6,
				});
				objects=new Array();
				enemies=new Array();
				projectiles=new Array();
			}
		}
		else{
			player.deathtimer+=1;
			if(player.deathtimer==1){
				sfx.shieldbreak.rate(random(0.9,1.1));
				sfx.shieldbreak.volume(options.sfx);
				sfx.shieldbreak.play();
			}
			for(cp=0;cp<4;cp+=1){
				append(particles,{x:player.x+random(-player.size,player.size),y:player.y+random(-player.size,player.size),xvelo:random(-2,2),yvelo:random(-2,2),
				size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(200,255),random(160,190),random(70,120)]});
			}
		}
	}
	else{
		playertemp.timesincedamagetaken+=1;
		if(player.wither>0){
			player.wither=min(player.mhp,max(0,player.wither-(0.0075+player.mhp*0.000035)));
		}
		for(z=0;z<player.modfuncs.passive.length;z+=1){
			player.modfuncs.passive[z]();
		}
		if(player.shipfuncs.passive){
			player.shipfuncs.passive();
		}
		if(render&canstart){
			playerdraw[player.shipId]();
		}
		if(player.shielddisable>0){
			player.shielddisable-=1;
		}
		if(player.stun>0){
			player.stun-=1;
		}
		else{
			domove();
			engineparticles+=0.2+moveinf.scl*1.8;
			while(engineparticles>0){
				engineparticles-=1;
				if(player.mods[17]){
					append(particles,{x:player.x,y:player.y+player.size*1.5,xvelo:random(-1,1)-sin(moveinf.dir)*moveinf.scl*max(player.staticspeed,player.speed),yvelo:random(-1,3)+cos(moveinf.dir)*moveinf.scl*max(player.staticspeed,player.speed),
					size:random(3,5),op:random(120,180),opc:-4,exp:1,color:[random(60,105)+playertemp.slow*225,random(140,190),random(160,240)-playertemp.slow*150]});
				}
				else{
					append(particles,{x:player.x,y:player.y+player.size*1.5,xvelo:random(-1,1)-sin(moveinf.dir)*moveinf.scl*max(player.staticspeed,player.speed),yvelo:random(-1,3)+cos(moveinf.dir)*moveinf.scl*max(player.staticspeed,player.speed),
					size:random(3,5),op:random(120,180),opc:-4,exp:1,color:[random(180,220),random(180,220),random(100,120)]});
				}
			}
			doshield();
			if(player.shielding){
				player.shield-=player.shielddecay/60;
				if(render){
					shielddraw[player.shipId]();
				}
			}
			else{
				if(input.special){
					if(player.specialcd<=0){
						if(special[player.shipId]){
							special[player.shipId]();
						}
					}
				}
				else if(input.shoot){
					if(player.shootcd<=0){
						if(shoot[player.shipId]){
							shoot[player.shipId]();
						}
					}
				}
			}
			if(player.shieldboing>0){
				player.shieldboing=max(0,player.shieldboing*0.95-0.05);
			}
			if(player.hpl>0){
				player.hpl=max(0,player.hpl*0.95-0.08);
			}
			if(player.hpg>0){
				player.hpg=max(0,player.hpg*0.95-0.08);
			}
		}
		player.ammo=min(100,player.ammo+player.ammor/60);
		if(player.mods[9]){
			player.ammo=min(100,player.ammo+player.ammor/120);
		}
		if(!(player.mods[9])||player.ammo==100){
			player.shield=min(player.mshield,player.shield+player.shieldregen/60);
		}
		if(player.shootcd>0){
			player.shootcd-=1;
			if(player.mods[8]){
				player.shootcd-=0.4;
			}
		}
		player.specialcd=max(0,player.specialcd-1);
	}
	if(parrymatrix.length>0){
		if(input.shield){
			for(a=0;a<parrymatrix.length;a+=1){
				parrymatrix[a].timer-=1;
				if(parrymatrix[a].timer<0){
					takedamage({dmg:parrymatrix[a].dmg,shieldlag:true});
					parrymatrix.splice(a,1);
					a-=1;
				}
			}
		}
		else{
			if(player.mods[7]){
				player.energy=min(player.menergy,player.energy+1);
			}
			if(player.mods[19]){
				playertemp.parryaddiction=0;
				if(playertemp.parryaddictioncd<=0){
					playertemp.parryaddictioncd=30;
					heal(6+player.mhp*0.03);
					for(cp=0;cp<30;cp+=1){
						append(particles,{x:random(915,965),y:random(590,610),xvelo:random(-2,2),yvelo:random(-6,-3),
						size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
					}
				}
			}
			if(player.shipfuncs.onparry){
				player.shipfuncs.onparry();
			}
			sfx.parry.rate(random(0.9,1.1));
			sfx.parry.volume(options.sfx*0.6);
			sfx.parry.play();
			player.shielding=0;
			parrymatrix=new Array();
			append(objects,{
				dur:15,
				draw:function(){
					noFill();
					stroke(100+abs(tick%100-50),100+abs(tick%100-50),255,objects[a].dur*16);
					ellipseMode(CENTER);
					strokeWeight(50-objects[a].dur*1.5);
					ellipse(player.x,player.y,player.size*2+100-objects[a].dur*8,player.size*2+125-objects[a].dur*10);
					noStroke();
					if(options.graphics){
						fill(0,0,255,objects[a].dur*0.5);
						rect(100,0,800,700);
					}
				},
				run:function(){
					objects[a].dur-=1;
					if(objects[a].dur<=0){
						objects.splice(a,1);
						a-=1;
					}
				}
			});
		}
	}
	if(ingame==0){
		if(menumode==0){
			if(mousePressed){
				controlmode=0;
			}
			if(key){
				if(keyPressed&(key.code==86||key.code==118)){
					controlmode=1;
				}
			}
			if(navigator.getGamepads()[0]){
				if(navigator.getGamepads()[0].buttons[0].value>0||navigator.getGamepads()[0].buttons[1].value>0){
					controlmode=2;
				}
			}
			if(navigator.getGamepads()[0]){
				if(navigator.getGamepads()[0].buttons[8].value>0||navigator.getGamepads()[0].buttons[9].value>0){
					controlmode=3;
				}
			}
			if(!(input.shoot)){
				shootlock=0;
			}
			textFont(0,55);
			fill(150,150,50+abs(tick%240-120));
			text("Infinite Space",350,55);
			textFont(0,25);
			fill(150,150,150);
			text("Version: "+version,380,95);
			textFont(0,23);
			fill(200,200,100);
			text("Control Mode",400,150);
			textFont(0,20);
			if(controlmode==0){
				fill(255,255,255);
			}
			else{
				fill(80,80,80);
			}
			text("Keyboard and Mouse (click anywhere to select)",300,180);
			if(controlmode==1){
				fill(255,255,255);
			}
			else{
				fill(80,80,80);
			}
			text("Keyboard Only (press V to select)",300,210);
			if(controlmode==2){
				fill(255,255,255);
			}
			else{
				fill(80,80,80);
			}
			text("XBox Controller (press A or B to select)",300,240);
			if(controlmode==3){
				fill(255,255,255);
			}
			else{
				fill(80,80,80);
			}
			textFont(0,16);
			text("XBox Controller - Alternate (Left or Right Trigger to select)",270,270);
			fill(255,255,255);
			textFont(0,20);
			if(controlmode==0){
				player.staticspeed=50;
				text("Mouse to move",300,340);
				text("Left click to shoot",300,370);
				text("Right click to shield",300,400);
				text("Space to use special",300,430);
				text("Esc to pause/unpause",300,460);
			}
			else if(controlmode==1){
				player.staticspeed=13;
				text("W,A,S,D to move",300,340);
				text("V to shoot",300,370);
				text("N or M to shield",300,400);
				text("B to use special",300,430);
				text("Esc to pause/unpause",300,460);
			}
			else if(controlmode==2){
				player.staticspeed=15;
				text("Left stick to move",300,340);
				text("B to shoot",300,370);
				text("Left or Right Trigger to shield",300,400);
				text("A to use special",300,430);
				text("START to pause/unpause",300,460);
			}
			else if(controlmode==3){
				player.staticspeed=15;
				text("Left stick to move",300,340);
				text("Right Trigger to shoot",300,370);
				text("A or B to shield",300,400);
				text("Right Trigger to use special",300,430);
				text("START to pause/unpause",300,460);
			}
			text("Shoot while in one of these circles to use it",270,500);
			noFill();
			strokeWeight(20+abs(tick%120-60)/6);
			ellipseMode(CENTER);
			stroke(255,150,140+abs(tick%90-45));
			ellipse(200,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipse(750,300,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			ellipse(200,300,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			ellipse(200,600,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			ellipse(750,600,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			textFont(0,18);
			fill(255,255,200);
			text("Start",730,295);
			text("Game",725,315);
			text("Change",165,295);
			text("Reset",175,42);
			text("Ship",180,315);
			text("Ship",180,65);
			text("Ship",180,615);
			text("Options",720,605);
			textFont(0,14);
			text("Customize",170,595);
			if(pow(pow(player.x-750,2)+pow(player.y-300,2),0.5)<75&input.shoot){
				gametick=0;
				//Apply customs
				if(options.custom.active){
					if(options.custom.forcebiome){
						forcebiome=1;
					}
					gametick=options.custom.starttime*72000;
				}
				else{
					forcebiome=0;
				}
				setbgm[choosebgm(-1)]();
				spawnplayer();
				stagetemp={};
				applyshipstats[player.shipId]();
				applymods();
				biome.temp={};
				player.staticspeed=0;
				ingame=1;
			}
			if(pow(pow(player.x-200,2)+pow(player.y-300,2),0.5)<75&input.shoot){
				menumode=1;
				viewmod=player.shipId;
				player.x=500;
				player.y=500;
			}
			if(pow(pow(player.x-200,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				shootlock=1;
				player.shipId=0;
				player.mods=new Array();
				options.shipId=0;
				options.shipMods=new Array();
				player.tinker={
					damage:0,
					health:0,
					shield:0,
					energy:0,
					speed:0,
					compaction:0,
				};
				options.misc[0]=0;
				options.misc[1]=0;
				options.misc[2]=0;
				options.misc[3]=0;
				options.misc[4]=0;
				options.misc[5]=0;
				saveStrings("infiniteSpace/options.txt",[JSON.stringify(options),1]);
				spawnplayer();
				applyshipstats[player.shipId]();
				applymods();
			}
			if(pow(pow(player.x-200,2)+pow(player.y-600,2),0.5)<75&input.shoot){
				menumode=2;
				tick=0;
				viewmod=0;
				shootlock=1;
				player.x=800;
				player.y=400;
			}
			if(pow(pow(player.x-750,2)+pow(player.y-600,2),0.5)<75&input.shoot){
				menumode=3;
				player.x=500;
				player.y=500;
			}
		}
		else if(menumode==1){
			noFill();
			ellipseMode(CENTER);
			strokeWeight(20+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipse(770,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			
			
			textAlign(CENTER);
			if(!(input.shoot)){
				shootlock=0;
			}
			for(a=0;a<ships.length;a+=1){
				if(ships[a].unlocked){
					if(player.shipId==a){
						fill(0,255,0);
					}
					else{
						noFill();
					}
					ellipseMode(CENTER);
					strokeWeight(20+abs(tick%120-60)/12);
					stroke(220,255,140+abs(tick%90-45));
					ellipse(150+floor(a/6)*120,50+(a%6)*120,100+abs(tick%120-60)/12,100+abs(tick%120-60)/12);
					noStroke();
					shape(sprites[ships[a].sprite],150+floor(a/6)*120,50+(a%6)*120,300,400);
					if(pow(pow(player.x-150-floor(a/6)*120,2)+pow(player.y-50-(a%6)*120,2),0.5)<55){
						viewmod=a;
						if(input.shoot&!(shootlock)){
							shootlock=1;
							player.shipId=a;
							options.shipId=a;
							saveStrings("infiniteSpace/options.txt",[JSON.stringify(options),1]);
							menumode=0;
							spawnplayer();
							applyshipstats[player.shipId]();
							applymods();
						}
					}
				}
			}
			textAlign(CENTER);
			textFont(0,25);
			fill(255,255,255);
			text(ships[viewmod].name,400,130,475,100);
			textFont(0,min(30,max(18,2750/ships[viewmod].misc.length)));
			fill(220,220,220);
			text(ships[viewmod].misc,400,190,475,120);
			textFont(0,min(30,max(18,2750/ships[viewmod].special.length)));
			fill(255,255,0);
			text("Special:  "+ships[viewmod].special,400,320,475,130);
			fill(255,255,255);
			textFont(0,20);
			text("Damage",550,445,100,50);
			text("Health",550,475,100,50);
			text("Shield",550,505,100,50);
			text("Speed",550,535,100,50);
			text("Energy",550,565,100,50);
			
			strokeWeight(3);
			stroke(0,0,0);
			getshipstatcolor(ships[viewmod].damage);
			for(a=0;a<ships[viewmod].damage;a+=1){
				rect(660+a*20,450,18,10,4);
			}
			getshipstatcolor(ships[viewmod].health);
			for(a=0;a<ships[viewmod].health;a+=1){
				rect(660+a*20,480,18,10,4);
			}
			getshipstatcolor(ships[viewmod].shield);
			for(a=0;a<ships[viewmod].shield;a+=1){
				rect(660+a*20,510,18,10,4);
			}
			getshipstatcolor(ships[viewmod].speed);
			for(a=0;a<ships[viewmod].speed;a+=1){
				rect(660+a*20,540,18,10,4);
			}
			getshipstatcolor(ships[viewmod].energy*0.7);
			for(a=0;a<ships[viewmod].energy;a+=1){
				rect(660+a*15,570,14,10,4);
			}
			noStroke();
			ellipseMode(CENTER);
			
			textFont(0,25);
			fill(255,255,200);
			text("Back",770,55);
			if(pow(pow(player.x-770,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				menumode=0;
				player.x=500;
				player.y=500;
			}
			textAlign(TOP,LEFT);
			
		}
		else if(menumode==2){
			if(tick<=60){
				bgm.volume((1-tick/60)*options.music*bgmv);
				if(tick==60){
					bgm.pause();
					setbgmt[10]();
					bgmt.play();
				}
			}
			if(!(input.shoot)){
				shootlock=0;
			}
			noFill();
			strokeWeight(20+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipseMode(CENTER);
			ellipse(770,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			if(viewmodtype==0){
				fill(0,255,0);
			}
			else{
				noFill();
			}
			ellipse(150,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			if(viewmodtype=="weapon"){
				fill(0,255,0);
			}
			else{
				noFill();
			}
			ellipse(275,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			if(viewmodtype=="ship"){
				fill(0,255,0);
			}
			else{
				noFill();
			}
			ellipse(400,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			if(viewmodtype=="shield"){
				fill(0,255,0);
			}
			else{
				noFill();
			}
			ellipse(525,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			textFont(0,20);
			fill(255,255,200);
			textAlign(TOP,LEFT);
			text("Confirm",735,55);
			if(pow(pow(player.x-770,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				options.shipMods=player.mods;
				options.misc[0]=player.tinker.damage;
				options.misc[1]=player.tinker.health;
				options.misc[2]=player.tinker.shield;
				options.misc[3]=player.tinker.energy;
				options.misc[4]=player.tinker.speed;
				options.misc[5]=player.tinker.compaction;
				saveStrings("infiniteSpace/options.txt",[JSON.stringify(options),1]);
				menumode=0;
				spawnplayer();
				applyshipstats[player.shipId]();
				applymods();
				if(bgmt){
					bgmt.stop();
				}
				bgm.volume(options.music*bgmv);
				bgm.play();
			}
			text("Tinker",120,55);
			if(pow(pow(player.x-150,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				viewmod=0;
				shootlock=1;
				viewmodtype=0;
			}
			text("Weapons",240,55);
			if(pow(pow(player.x-275,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				viewmod=0;
				shootlock=1;
				viewmodtype="weapon";
			}
			text("Ship",381,55);
			if(pow(pow(player.x-400,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				viewmod=0;
				shootlock=1;
				viewmodtype="ship";
			}
			text("Shield",497,55);
			if(pow(pow(player.x-525,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				viewmod=0;
				shootlock=1;
				viewmodtype="shield";
			}
			textAlign(CENTER);
			if(viewmodtype==0){
				tinkerbutton(150,180,"Damage","damage");
				tinkerbutton(150,330,"Health","health");
				tinkerbutton(150,480,"Shield","shield");
				tinkerbutton(150,630,"Compaction","compaction");
				tinkerbutton(400,250,"Energy","energy");
				tinkerbutton(400,400,"Speed","speed");
				
				fill(255,0,0);
				rect(450,500,150,50,10);
				fill(255,255,255);
				text("Reset",450,515,150,50);
				if(input.shoot&!(shootlock)){
					if(hitboxr(525,525,player.x,player.y,75,25)){
						player.tinker={
							damage:0,
							health:0,
							shield:0,
							energy:0,
							speed:0,
							compaction:0,
						};
						shootlock=1;
						recalinstability();
					}
				}
				
			}
			else{
				for(a=0;a<mods[viewmodtype].length;a+=1){
					if(player.mods[mods[viewmodtype][a].id]){
						fill(0,255,0);
					}
					else{
						noFill();
					}
					strokeWeight(14);
					stroke((a%3)*80,(a%4)*60,(a%2)*120);
					rect(150+floor(a/5)*120,120+(a%5)*120,90,90);
					noStroke();
					textFont(0,14);
					fill(255,255,200);
					text(mods[viewmodtype][a].name,165+floor(a/5)*120,140+(a%5)*120,65,65);
					if(tick%3==0||input.shoot&!(shootlock)){
						if(playerhitbox(190+floor(a/5)*120,160+(a%5)*120,37)){
							viewmod=a;
							if(input.shoot&!(shootlock)){
								shootlock=1;
								if(player.mods[mods[viewmodtype][a].id]){
									player.mods[mods[viewmodtype][a].id]=0;
								}
								else{
									player.mods[mods[viewmodtype][a].id]=1;
								}
								recalinstability();
							}
						}
					}
				}
			}
			textAlign(CENTER);
			fill(255,170,255);
			textFont(0,22);
			text("Stability",610,10,80,50);
			text(-player.instability,610,40,80,50);
			textFont(0,25);
			fill(255,255,255);
			if(viewmodtype==0){
				text("Don't over-do it! Reducing your ship's stability can cause effects such as reduced movement control and even health degeneration! Aim for a stability of 0, as excess stability provides no benefit.",660,130,240,400);
				fill(255,170,255);
				textFont(0,22);
				if(player.instability>0){
					text("Currently reducing movement control at and below "+(min(100,player.instability))+"% health",660,490,240,120);
				}
				if(player.instability>100){
					text("Currently losing "+((player.instability-100)/40)+" health per second",660,600,240,130);
				}
			}
			else{
				text(mods[viewmodtype][viewmod].name,660,130,240,100);
				textFont(0,22);
				fill(220,220,220);
				text(mods[viewmodtype][viewmod].desc,660,230,240,150);
				fill(0,255,0);
				text(mods[viewmodtype][viewmod].pro,660,380,240,150);
				fill(255,0,0);
				text(mods[viewmodtype][viewmod].con,660,530,240,150);
				if(player.mods[mods[viewmodtype][viewmod].id]){
					textFont(0,28);
					fill(100,100,255);
					text("SELECTED",700,650,200,50);
				}
			}
			textAlign(TOP,LEFT);
			
		}
		else if(menumode==3){
			noFill();
			strokeWeight(20+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipseMode(CENTER);
			ellipse(770,50,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			
			
			textAlign(CENTER);
			if(!(input.shoot)){
				shootlock=0;
			}
			if(options.stars>0){
				if(options.stars>1){
					fill(0,255,0,150);
				}
				else{
					fill(255,220,140,150);
				}
			}
			else{
				noFill();
			}
			strokeWeight(20+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipse(150,100,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			textFont(0,16);
			fill(255,255,255);
			text("Stars",125,95,55,55);
			if(pow(pow(player.x-150,2)+pow(player.y-100,2),0.5)<75){
				if(input.shoot&!(shootlock)){
					shootlock=1;
					options.stars+=1;
					if(options.stars>2){
						options.stars=0;
					}
				}
			}
			if(options.graphics>0){
				fill(0,255,0,150);
			}
			else{
				noFill();
			}
			strokeWeight(20+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipse(150,220,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			textFont(0,15);
			fill(255,255,255);
			text("Graphics",125,215,55,55);
			if(pow(pow(player.x-150,2)+pow(player.y-220,2),0.5)<75){
				if(input.shoot&!(shootlock)){
					shootlock=1;
					options.graphics+=1;
					if(options.graphics>1){
						options.graphics=0;
					}
				}
			}
			if(options.custom.active>0){
				fill(0,255,0,150);
			}
			else{
				noFill();
			}
			strokeWeight(20+abs(tick%120-60)/6);
			stroke(220,255,140+abs(tick%90-45));
			ellipse(150,340,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
			noStroke();
			textFont(0,15);
			fill(255,255,255);
			text("Custom",125,325,55,55);
			text("game",125,345,55,55);
			if(pow(pow(player.x-150,2)+pow(player.y-340,2),0.5)<75){
				if(input.shoot&!(shootlock)){
					shootlock=1;
					if(options.custom.active){
						options.custom.active=0;
					}
					else{
						options.custom.active=1;
						if(!(options.custom.starttime)){
							options.custom.starttime=0;
						}
					}
				}
			}
			if(options.custom.active){
				if(options.custom.forcebiome>0){
					fill(0,255,0,150);
				}
				else{
					noFill();
				}
				strokeWeight(20+abs(tick%120-60)/6);
				stroke(220,255,140+abs(tick%90-45));
				ellipse(150,460,100+abs(tick%120-60)/6,100+abs(tick%120-60)/6);
				noStroke();
				textFont(0,15);
				fill(255,255,255);
				text("Biomes",125,445,55,55);
				text("only",125,465,55,55);
				if(pow(pow(player.x-150,2)+pow(player.y-460,2),0.5)<75){
					if(input.shoot&!(shootlock)){
						shootlock=1;
						if(options.custom.forcebiome){
							options.custom.forcebiome=0;
						}
						else{
							options.custom.forcebiome=1;
						}
					}
				}
			}
			noStroke();
			
			textFont(0,25);
			
			fill(255,255,255);
			text("Music",720,175,100,55);
			fill(0,0,0);
			rect(650,230,200,40,10);
			fill(0,200,0);
			rect(650,230,options.music*200,40,10);
			fill(250,250,90);
			rect(635+options.music*200,210,30,80,8);
			if(input.shoot){
				if(hitboxr(750,250,player.x,player.y,110,40)){
					if(!(options.music==max(0,min(1,round((player.x-650)/10)/20)))){
						options.music=max(0,min(1,round((player.x-650)/10)/20));
						bgm.volume(options.music*bgmv);
					}
				}
			}
			
			fill(255,255,255);
			text("SFX",720,375,100,55);
			fill(0,0,0);
			rect(650,430,200,40,10);
			fill(0,200,0);
			rect(650,430,options.sfx*200,40,10);
			fill(250,450,90);
			rect(635+options.sfx*200,410,30,80,8);
			if(input.shoot){
				if(hitboxr(750,450,player.x,player.y,110,40)){
					if(!(options.sfx==max(0,min(1,round((player.x-650)/10)/20)))){
						options.sfx=max(0,min(1,round((player.x-650)/10)/20));
					}
				}
			}
			
			if(options.custom.active){
				fill(255,255,255);
				text("Enabled biomes",360,15,200,55);
				/*textFont(0,16);
				text("Tip: do not disable all of them",490,50,100,300);*/
				strokeWeight(7);
				textFont(0,17);
				textAlign(CENTER);
				for(a=0;a<biomelist.length;a+=1){
					stroke(0,0,0);
					if(options.custom.disabledbiomes[a]){
						noFill();
					}
					else{
						fill(biomelist[a].rgb[0],biomelist[a].rgb[1],biomelist[a].rgb[2],180);
					}
					rect(400,50+a*100,80,80,5);
					noStroke();
					fill(255-biomelist[a].rgb[0],255-biomelist[a].rgb[1],255-biomelist[a].rgb[2]);
					text(biomelist[a].name,400,70+a*100,80,80);
					if(input.shoot&!(shootlock)){
						if(hitboxr(440,90+a*100,player.x,player.y,40,40)){
							shootlock=1;
							if(options.custom.disabledbiomes[a]){
								options.custom.disabledbiomes[a]=0;
							}
							else{
								options.custom.disabledbiomes[a]=1;
							}
						}
					}
				}
				fill(255,255,255);
				text("Start time:",600,565,150,55);
				textFont(0,18);
				text(round(options.custom.starttime*200)/10+" minutes",730,570,140,55);
				fill(0,0,0);
				rect(650,630,200,40,10);
				fill(0,200,0);
				rect(650,630,options.custom.starttime*200,40,10);
				fill(250,450,90);
				rect(635+options.custom.starttime*200,610,30,80,8);
				if(input.shoot){
					if(hitboxr(750,650,player.x,player.y,110,40)){
						if(!(options.custom.starttime==max(0,min(1,round((player.x-650)/5)/40)))){
							options.custom.starttime=max(0,min(1,round((player.x-650)/5)/40));
						}
					}
				}
				
			}
			
			textAlign(TOP,LEFT);
			textFont(0,25);
			fill(255,255,200);
			text("Back",740,55);
			if(pow(pow(player.x-770,2)+pow(player.y-50,2),0.5)<75&input.shoot){
				saveStrings("infiniteSpace/options.txt",[JSON.stringify(options),1]);
				menumode=0;
				player.x=500;
				player.y=500;
			}
			
		}
	}
	//INGAME
	else{
		if(player.deathtimer>=60){
			player.y=-999;
			fill(255,0,0);
			textFont(0,30);
			text("GAVE OVER",400,150);
			fill(255,100,0);
			textFont(0,25);
			text("Shoot to respawn",380,200);
		}
		//Currently playing
		if(!(player.deathtimer>10)){
			gametick+=1;
			if(gametick%600==0){
				append(objects,{
					x:random(130,870),
					y:-30,
					draw:function(){
						fill(abs(tick%120-60)*2,255,abs(tick%120-60)*2,180+abs(tick%90-45));
						ellipseMode(CENTER);
						ellipse(objects[a].x,objects[a].y,20+abs(tick%50-25)/5,20+abs((tick+25)%50-25)/5);
					},
					run:function(){
						if(playerhitbox(objects[a].x,objects[a].y,15)){
							objects[a].y=999;
							if(player.mods[12]){
								player.energy=min(player.menergy,player.energy+1);
								for(cp=0;cp<30;cp+=1){
									append(particles,{x:random(15,85),y:random(340,360),xvelo:random(-2,2),yvelo:random(-6,-3),
									size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
								}
							}
							if(player.mods[14]){
								heal(7.5+player.mhp*0.025);
								for(cp=0;cp<30;cp+=1){
									append(particles,{x:random(915,965),y:random(590,610),xvelo:random(-2,2),yvelo:random(-6,-3),
									size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
								}
							}
							else{
								player.energy=min(player.menergy,player.energy+1);
								for(cp=0;cp<30;cp+=1){
									append(particles,{x:random(15,85),y:random(340,360),xvelo:random(-2,2),yvelo:random(-6,-3),
									size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[random(50,100),random(200,255),random(50,100)]});
								}
							}
						}
						objects[a].y+=3;
						if(objects[a].y>730){
							objects.splice(a,1);
							a-=1;
						}
					}
				});
			}
			biomescripts[biome.id]();
		}
	}
	//PANELS
		ellipseMode(CENTER);
		fill(80,70,20);
		rect(0,0,100,700);
		rect(900,0,100,700);
		fill(0,0,0);
		rect(30,360,40,300);
		if(player.hpl>0){
			fill(player.hpl*10,player.hpl*10,0);
		}
		rect(915,100,50,500);
		fill(210+abs(tick%180-90)/2,abs(tick%180-90)/2,abs(tick%180-90)/2);
		rect(915,600-(max(0,min(1,player.hp/player.mhp)))*500,50,(max(0,min(1,player.hp/player.mhp)))*500);
		if(player.hp>0){
			if(player.hpg>0){
				fill(0,255,0);
				rect(915,600-(max(0,(player.hp)/player.mhp))*500,50,(max(0,(player.hpg)/player.mhp))*500);
			}
			if(player.hpl>0){
				fill(180,0,180);
				rect(915,600-(max(0,(player.hp+player.hpl)/player.mhp))*500,50,(max(0,(player.hpl)/player.mhp))*500);
			}
		}
		if(options.graphics){
			if(player.hpl>5){
				fill(255,0,0);
			}
			else{
				fill(60,60,60,60);
			}
			for(a=1;a<(player.hp/player.mhp)*9.9;a+=1){
				ellipse(925,610-a*50,18,18);
			}
			for(a=1;a<(player.hp/player.mhp)*10.4;a+=1){
				ellipse(940,635-a*50,18,18);
			}
			for(a=1;a<(player.hp/player.mhp)*9.9;a+=1){
				ellipse(955,610-a*50,18,18);
			}
		}
		if(player.wither>0){
			fill(0,0,0,180);
			rect(915,600,50,-(min(1,player.wither/player.mhp))*500);
			for(cp=0;cp<1+(player.wither/player.mhp)*4;cp+=1){
				append(particles,{x:random(915,965),y:random(595-(max(0,min(player.hp,player.wither))/player.mhp)*500,610),xvelo:random(-2,2),yvelo:random(-6,-3),
				size:random(7,10),op:random(120,180),opc:-7,exp:1,color:[0,0,0]});
			}
		}
		if(player.instability>0&player.instability<100){
			fill(255,255,100+abs(tick%120-60));
			rect(910,600-player.instability*5,60,10,3);
		}
		if(player.modfuncs.overlayus){
			for(z=0;z<player.modfuncs.overlayus.length;z+=1){
				player.modfuncs.overlayus[z]();
			}
		}
		fill(abs(tick%120-50),abs(tick%120-60),130+abs(tick%120-60),150+(player.shield/player.mshield)*50);
		if(player.shielding){
			rect(940,600-(player.shield/player.mshield)*500,45,(player.shield/player.mshield)*500);
			if(options.graphics){
				fill(200,200,255,20+abs(tick%50-25));
				rect(940+tick%30*4/3,600-(player.shield/player.mshield)*500,5,(player.shield/player.mshield)*500);
				rect(940+(tick+10)%30*4/3,600-(player.shield/player.mshield)*500,5,(player.shield/player.mshield)*500);
				rect(940+(tick+20)%30*4/3,600-(player.shield/player.mshield)*500,5,(player.shield/player.mshield)*500);
			}
		}
		else{
			rect(955,600-(player.shield/player.mshield)*500,30,(player.shield/player.mshield)*500);
			if(options.graphics){
				fill(200,200,255,20);
				rect(955+tick%30*2.5/3,600-(player.shield/player.mshield)*500,5,(player.shield/player.mshield)*500);
				rect(955+(tick+10)%30*2.5/3,600-(player.shield/player.mshield)*500,5,(player.shield/player.mshield)*500);
				rect(955+(tick+20)%30*2.5/3,600-(player.shield/player.mshield)*500,5,(player.shield/player.mshield)*500);
			}
		}
		fill(170,130,(130-player.ammo)*abs(tick%150-75)/150);
		rect(30,360,40,player.ammo*3);
		fill(20,20,20);
		ellipse(50,350,70,30);
		if(player.ammo>=100){
			noFill();
			strokeWeight(12);
			stroke(200,200,80);
			arc(50,350,60,20,0,PI);
			noStroke();
		}
		if(player.energy>=player.menergy-0.001){
			noFill();
			strokeWeight(12);
			stroke(200,200,80);
			arc(50,350,60,20,PI,2*PI);
			noStroke();
		}
		fill(100,255,100);
		strokeWeight(7);
		stroke(abs(tick%120-60),abs(tick%120-60),abs(tick%120-60));
		for(a=0;a<floor(player.energy);a+=1){
			rect(30,340-a*300/player.menergy-220/player.menergy,40,220/player.menergy,6);
		}
		if(player.energy%1>0){
			noStroke();
			rect(30,340-floor(player.energy)*300/player.menergy-220/player.menergy,player.energy%1*40,220/player.menergy,6);
		}
		noStroke();
		if(player.shipfuncs.overlay){
			player.shipfuncs.overlay();
		}
		if(player.modfuncs.overlay){
			for(z=0;z<player.modfuncs.overlay.length;z+=1){
				player.modfuncs.overlay[z]();
			}
		}
		textFont(0,15);
		fill(255,100,150);
		text('FPS: '+fps.fps,920,680);
		if(options.custom.active){
			textFont(0,17);
			fill(255,100,100,125);
			text("CUSTOM",905,70);
			text("CUSTOM",5,30);
		}
		textFont(0,18);
		fill(180,200,255);
		text('SCORE',910,25);
		textFont(0,14);
		fill(0,0,0);
		text("Version:",925,75);
		text(version,910,90);
		fill(0,0,0);
		text("Time:",15,20);
		text(floor(gametick/3600)+":"+getgamesecfd(),15,35);
		textFont(0,16);
		fill(180,255,200);
		text(player.score,920,50);
	//Particles
	ellipseMode(CENTER);
	for(a=0;a<particles.length;a+=1){
		if(render){
			fill(particles[a].color[0],particles[a].color[1],particles[a].color[2],particles[a].op);
			ellipse(particles[a].x,particles[a].y,particles[a].size,particles[a].size);
		}
		if(particles[a].sizec){
			particles[a].size+=particles[a].sizec;
		}
		if(particles[a].opc){
			particles[a].op+=particles[a].opc;
		}
		if(particles[a].xvelo){
			particles[a].x+=particles[a].xvelo;
		}
		if(particles[a].yvelo){
			particles[a].y+=particles[a].yvelo;
		}
		if(particles[a].xacc){
			particles[a].xvelo+=particles[a].xacc;
		}
		if(particles[a].yacc){
			particles[a].yvelo+=particles[a].yacc;
		}
		if(particles[a].exp==1){
			if(particles[a].op<=0){
				particles.splice(a,1);
				a-=1;
			}
		}
		else{
			particles[a].dur-=1;
			if(!(particles[a].dur>0)){
				particles.splice(a,1);
				a-=1;
			}
		}
	}
	if(loadassetscache){
		loadassetscache();
	}
}
}
}
